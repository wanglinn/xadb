
/*
 * NOTES
 *  ******************************
 *  *** DO NOT EDIT THIS FILE! ***
 *  ******************************
 *
 *  It has been GENERATED by src/backend/nodes/gen_nodes.pl
 *
 * not declare:
 *   IndexInfo
 *   ExprContext
 *   ProjectionInfo
 *   JunkFilter
 *   OnConflictSetState
 *   ResultRelInfo
 *   EState
 *   TupleTableSlot
 *   CustomScan
 *   PlanState
 *   ResultState
 *   ProjectSetState
 *   ModifyTableState
 *   AppendState
 *   MergeAppendState
 *   RecursiveUnionState
 *   BitmapAndState
 *   BitmapOrState
 *   ScanState
 *   SeqScanState
 *   SampleScanState
 *   IndexScanState
 *   IndexOnlyScanState
 *   BitmapIndexScanState
 *   BitmapHeapScanState
 *   TidScanState
 *   TidRangeScanState
 *   SubqueryScanState
 *   FunctionScanState
 *   TableFuncScanState
 *   ValuesScanState
 *   CteScanState
 *   NamedTuplestoreScanState
 *   WorkTableScanState
 *   ForeignScanState
 *   CustomScanState
 *   JoinState
 *   NestLoopState
 *   MergeJoinState
 *   HashJoinState
 *   MaterialState
 *   ResultCacheState
 *   SortState
 *   IncrementalSortState
 *   GroupState
 *   AggState
 *   WindowAggState
 *   UniqueState
 *   GatherState
 *   GatherMergeState
 *   HashState
 *   SetOpState
 *   LockRowsState
 *   LimitState
 *   BatchSortState
 *   RemoteCopyState
 *   RemoteQueryState
 *   ClusterGatherState
 *   ClusterMergeGatherState
 *   ClusterReduceState
 *   ReduceScanState
 *   EmptyResultState
 *   ParamTuplestoreScanState
 *   ConnectByState
 *   ExprState
 *   WindowFuncExprState
 *   SetExprState
 *   SubPlanState
 *   DomainConstraintState
 *   PlannerInfo
 *   RelOptInfo
 *   ForeignKeyOptInfo
 *   CustomPath
 *   MemoryContext
 *   AllocSetContext
 *   SlabContext
 *   GenerationContext
 *   Value
 *   Integer
 *   Float
 *   String
 *   BitString
 *   Null
 *   List
 *   IntList
 *   OidList
 *   StartReplicationCmd
 *   TimeLineHistoryCmd
 *   TriggerData
 *   ReturnSetInfo
 *   WindowObjectData
 *   TIDBitmap
 *   FdwRoutine
 *   IndexAmRoutine
 *   TableAmRoutine
 *   TsmRoutine
 *   ForeignKeyCacheInfo
 *   RelationData
 *   ParamExecData
 *   ParallelBitmapHeapState
 *   TransitionCaptureState
 *   PartitionKeyData
 */

#ifndef BEGIN_NODE
#	define BEGIN_NODE(t)
#endif
#ifndef END_NODE
#	define END_NODE(t)
#endif

#ifndef NODE_BASE2
#	define NODE_BASE2(t,m) NODE_BASE(t)
#endif
#ifndef NODE_SAME
#	define NODE_SAME(t1,t2) \
		BEGIN_NODE(t1)		\
			NODE_BASE(t2)	\
		END_NODE(t1)
#endif
#ifndef NODE_ARG_
#	define NODE_ARG_ node
#endif

#ifndef NODE_BASE
#	define NODE_BASE(b)
#endif
#ifndef NODE_NODE
#	define NODE_NODE(t,m)
#endif
#ifndef NODE_NODE_MEB
#	define NODE_NODE_MEB(t,m)
#endif
#ifndef NODE_NODE_ARRAY
#	define NODE_NODE_ARRAY(t,m,l)
#endif
#ifndef NODE_BITMAPSET
#	define NODE_BITMAPSET(t,m)
#endif
#ifndef NODE_BITMAPSET_ARRAY
#	define NODE_BITMAPSET_ARRAY(t,m,l)
#endif
#ifndef NODE_BYTEA_ARRAY
#	define NODE_BYTEA_ARRAY(t,m,l)
#endif
#ifndef NODE_RELIDS
#	define NODE_RELIDS(t,m) NODE_BITMAPSET(Bitmapset,m)
#endif
#ifndef NODE_RELIDS_ARRAY
#	define NODE_RELIDS_ARRAY(t,m,l) NODE_BITMAPSET_ARRAY(Bitmapset,m,l)
#endif
#ifndef NODE_LOCATION
#	define NODE_LOCATION(t,m) NODE_SCALAR(t,m)
#endif
#ifndef NODE_SCALAR
#	define NODE_SCALAR(t,m)
#endif
#ifndef NODE_OID
#	define NODE_OID(t,m) NODE_SCALAR(Oid, m)
#endif
#ifndef NODE_SCALAR_POINT
#	define NODE_SCALAR_POINT(t,m,l)
#endif
#ifndef NODE_SCALAR_ARRAY
#	define NODE_SCALAR_ARRAY NODE_SCALAR_POINT
#endif
#ifndef NODE_OTHER_POINT
#	define NODE_OTHER_POINT(t,m)
#endif
#ifndef NODE_STRING
#	define NODE_STRING(m)
#endif
#ifndef NODE_StringInfo
#	define NODE_StringInfo(m)
#endif
#ifndef NODE_STRUCT
#	define NODE_STRUCT(t,m)
#endif
#ifndef NODE_STRUCT_ARRAY
#	define NODE_STRUCT_ARRAY(t,m,l)
#endif
#ifndef NODE_STRUCT_LIST
#	define NODE_STRUCT_LIST(t,m)
#endif
#ifndef NODE_STRUCT_MEB
#	define NODE_STRUCT_MEB(t,m)
#endif
#ifndef NODE_ENUM
#	define NODE_ENUM(t,m)
#endif
#ifndef NODE_DATUM
#	define NODE_DATUM(t, m, o, n)
#endif
#ifndef NODE_OID_LIST
#	define NODE_OID_LIST(t,m) NODE_NODE(List, m)
#endif

#ifndef NO_NODE_Plan
BEGIN_NODE(Plan)
	NODE_SCALAR(Cost,startup_cost)
	NODE_SCALAR(Cost,total_cost)
	NODE_SCALAR(double,plan_rows)
	NODE_SCALAR(int,plan_width)
	NODE_SCALAR(bool,parallel_aware)
	NODE_SCALAR(bool,parallel_safe)
	NODE_SCALAR(bool,async_capable)
	NODE_SCALAR(int,plan_node_id)
	NODE_NODE(List,targetlist)
	NODE_NODE(List,qual)
	NODE_NODE(Plan,lefttree)
	NODE_NODE(Plan,righttree)
	NODE_NODE(List,initPlan)
	NODE_BITMAPSET(Bitmapset,extParam)
	NODE_BITMAPSET(Bitmapset,allParam)
END_NODE(Plan)
#endif /* NO_NODE_Plan */

#ifndef NO_NODE_Result
BEGIN_NODE(Result)
	NODE_BASE2(Plan,plan)
	NODE_NODE(Node,resconstantqual)
END_NODE(Result)
#endif /* NO_NODE_Result */

#ifndef NO_NODE_ProjectSet
BEGIN_NODE(ProjectSet)
	NODE_BASE2(Plan,plan)
END_NODE(ProjectSet)
#endif /* NO_NODE_ProjectSet */

#ifndef NO_NODE_ModifyTable
BEGIN_NODE(ModifyTable)
	NODE_BASE2(Plan,plan)
	NODE_ENUM(CmdType,operation)
	NODE_SCALAR(bool,canSetTag)
	NODE_SCALAR(Index,nominalRelation)
	NODE_SCALAR(Index,rootRelation)
	NODE_SCALAR(bool,partColsUpdated)
	NODE_NODE(List,resultRelations)
	NODE_NODE(List,updateColnosLists)
	NODE_NODE(List,withCheckOptionLists)
	NODE_NODE(List,returningLists)
	NODE_NODE(List,fdwPrivLists)
	NODE_BITMAPSET(Bitmapset,fdwDirectModifyPlans)
	NODE_NODE(List,rowMarks)
	NODE_SCALAR(int,epqParam)
	NODE_ENUM(OnConflictAction,onConflictAction)
	NODE_OID_LIST(class,arbiterIndexes)
	NODE_NODE(List,onConflictSet)
	NODE_NODE(List,onConflictCols)
	NODE_NODE(Node,onConflictWhere)
	NODE_SCALAR(Index,exclRelRTI)
	NODE_NODE(List,exclRelTlist)
#ifdef ADB
	NODE_NODE(List,remote_plans)
	NODE_NODE(List,resultAttnos)
	NODE_NODE(List,param_new)
	NODE_NODE(List,param_old)
#endif
END_NODE(ModifyTable)
#endif /* NO_NODE_ModifyTable */

#ifndef NO_NODE_Append
BEGIN_NODE(Append)
	NODE_BASE2(Plan,plan)
	NODE_BITMAPSET(Bitmapset,apprelids)
	NODE_NODE(List,appendplans)
	NODE_SCALAR(int,nasyncplans)
	NODE_SCALAR(int,first_partial_plan)
	NODE_NODE(PartitionPruneInfo,part_prune_info)
END_NODE(Append)
#endif /* NO_NODE_Append */

#ifndef NO_NODE_MergeAppend
BEGIN_NODE(MergeAppend)
	NODE_BASE2(Plan,plan)
	NODE_BITMAPSET(Bitmapset,apprelids)
	NODE_NODE(List,mergeplans)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,sortColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,sortOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,collations,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(bool,nullsFirst,NODE_ARG_->numCols)
	NODE_NODE(PartitionPruneInfo,part_prune_info)
END_NODE(MergeAppend)
#endif /* NO_NODE_MergeAppend */

#ifndef NO_NODE_RecursiveUnion
BEGIN_NODE(RecursiveUnion)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(int,wtParam)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,dupColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,dupOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,dupCollations,NODE_ARG_->numCols)
	NODE_SCALAR(long,numGroups)
END_NODE(RecursiveUnion)
#endif /* NO_NODE_RecursiveUnion */

#ifndef NO_NODE_BitmapAnd
BEGIN_NODE(BitmapAnd)
	NODE_BASE2(Plan,plan)
	NODE_NODE(List,bitmapplans)
END_NODE(BitmapAnd)
#endif /* NO_NODE_BitmapAnd */

#ifndef NO_NODE_BitmapOr
BEGIN_NODE(BitmapOr)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(bool,isshared)
	NODE_NODE(List,bitmapplans)
END_NODE(BitmapOr)
#endif /* NO_NODE_BitmapOr */

#ifndef NO_NODE_Scan
BEGIN_NODE(Scan)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(Index,scanrelid)
#ifdef ADB
	NODE_NODE(List,execute_nodes)
#endif
END_NODE(Scan)
#endif /* NO_NODE_Scan */

#ifndef NO_NODE_SeqScan
NODE_SAME(SeqScan, Scan)
#endif /* NO_NODE_SeqScan */

#ifndef NO_NODE_SampleScan
BEGIN_NODE(SampleScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(TableSampleClause,tablesample)
END_NODE(SampleScan)
#endif /* NO_NODE_SampleScan */

#ifndef NO_NODE_IndexScan
BEGIN_NODE(IndexScan)
	NODE_BASE2(Scan,scan)
	NODE_OID(class,indexid)
	NODE_NODE(List,indexqual)
	NODE_NODE(List,indexqualorig)
	NODE_NODE(List,indexorderby)
	NODE_NODE(List,indexorderbyorig)
	NODE_NODE(List,indexorderbyops)
	NODE_ENUM(ScanDirection,indexorderdir)
END_NODE(IndexScan)
#endif /* NO_NODE_IndexScan */

#ifndef NO_NODE_IndexOnlyScan
BEGIN_NODE(IndexOnlyScan)
	NODE_BASE2(Scan,scan)
	NODE_OID(class,indexid)
	NODE_NODE(List,indexqual)
	NODE_NODE(List,indexorderby)
	NODE_NODE(List,indextlist)
	NODE_ENUM(ScanDirection,indexorderdir)
END_NODE(IndexOnlyScan)
#endif /* NO_NODE_IndexOnlyScan */

#ifndef NO_NODE_BitmapIndexScan
BEGIN_NODE(BitmapIndexScan)
	NODE_BASE2(Scan,scan)
	NODE_OID(class,indexid)
	NODE_SCALAR(bool,isshared)
	NODE_NODE(List,indexqual)
	NODE_NODE(List,indexqualorig)
END_NODE(BitmapIndexScan)
#endif /* NO_NODE_BitmapIndexScan */

#ifndef NO_NODE_BitmapHeapScan
BEGIN_NODE(BitmapHeapScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(List,bitmapqualorig)
END_NODE(BitmapHeapScan)
#endif /* NO_NODE_BitmapHeapScan */

#ifndef NO_NODE_TidScan
BEGIN_NODE(TidScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(List,tidquals)
END_NODE(TidScan)
#endif /* NO_NODE_TidScan */

#ifndef NO_NODE_TidRangeScan
BEGIN_NODE(TidRangeScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(List,tidrangequals)
END_NODE(TidRangeScan)
#endif /* NO_NODE_TidRangeScan */

#ifndef NO_NODE_SubqueryScan
BEGIN_NODE(SubqueryScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(Plan,subplan)
END_NODE(SubqueryScan)
#endif /* NO_NODE_SubqueryScan */

#ifndef NO_NODE_FunctionScan
BEGIN_NODE(FunctionScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(List,functions)
	NODE_SCALAR(bool,funcordinality)
END_NODE(FunctionScan)
#endif /* NO_NODE_FunctionScan */

#ifndef NO_NODE_ValuesScan
BEGIN_NODE(ValuesScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(List,values_lists)
END_NODE(ValuesScan)
#endif /* NO_NODE_ValuesScan */

#ifndef NO_NODE_TableFuncScan
BEGIN_NODE(TableFuncScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(TableFunc,tablefunc)
END_NODE(TableFuncScan)
#endif /* NO_NODE_TableFuncScan */

#ifndef NO_NODE_CteScan
BEGIN_NODE(CteScan)
	NODE_BASE2(Scan,scan)
	NODE_SCALAR(int,ctePlanId)
	NODE_SCALAR(int,cteParam)
END_NODE(CteScan)
#endif /* NO_NODE_CteScan */

#ifndef NO_NODE_NamedTuplestoreScan
BEGIN_NODE(NamedTuplestoreScan)
	NODE_BASE2(Scan,scan)
	NODE_STRING(enrname)
END_NODE(NamedTuplestoreScan)
#endif /* NO_NODE_NamedTuplestoreScan */

#ifndef NO_NODE_WorkTableScan
BEGIN_NODE(WorkTableScan)
	NODE_BASE2(Scan,scan)
	NODE_SCALAR(int,wtParam)
END_NODE(WorkTableScan)
#endif /* NO_NODE_WorkTableScan */

#ifndef NO_NODE_ForeignScan
BEGIN_NODE(ForeignScan)
	NODE_BASE2(Scan,scan)
	NODE_ENUM(CmdType,operation)
	NODE_SCALAR(Index,resultRelation)
	NODE_SCALAR(Oid,fs_server)
	NODE_NODE(List,fdw_exprs)
	NODE_NODE(List,fdw_private)
	NODE_NODE(List,fdw_scan_tlist)
	NODE_NODE(List,fdw_recheck_quals)
	NODE_BITMAPSET(Bitmapset,fs_relids)
	NODE_SCALAR(bool,fsSystemCol)
END_NODE(ForeignScan)
#endif /* NO_NODE_ForeignScan */

#ifndef NO_NODE_Join
BEGIN_NODE(Join)
	NODE_BASE2(Plan,plan)
	NODE_ENUM(JoinType,jointype)
	NODE_SCALAR(bool,inner_unique)
	NODE_NODE(List,joinqual)
END_NODE(Join)
#endif /* NO_NODE_Join */

#ifndef NO_NODE_NestLoop
BEGIN_NODE(NestLoop)
	NODE_BASE2(Join,join)
	NODE_NODE(List,nestParams)
END_NODE(NestLoop)
#endif /* NO_NODE_NestLoop */

#ifndef NO_NODE_MergeJoin
BEGIN_NODE(MergeJoin)
	NODE_BASE2(Join,join)
	NODE_SCALAR(bool,skip_mark_restore)
	NODE_NODE(List,mergeclauses)
	NODE_SCALAR_POINT(Oid,mergeFamilies,list_length(NODE_ARG_->mergeclauses))
	NODE_SCALAR_POINT(Oid,mergeCollations,list_length(NODE_ARG_->mergeclauses))
	NODE_SCALAR_POINT(int,mergeStrategies,list_length(NODE_ARG_->mergeclauses))
	NODE_SCALAR_POINT(bool,mergeNullsFirst,list_length(NODE_ARG_->mergeclauses))
END_NODE(MergeJoin)
#endif /* NO_NODE_MergeJoin */

#ifndef NO_NODE_HashJoin
BEGIN_NODE(HashJoin)
	NODE_BASE2(Join,join)
	NODE_NODE(List,hashclauses)
	NODE_NODE(List,hashoperators)
	NODE_NODE(List,hashcollations)
	NODE_NODE(List,hashkeys)
#ifdef ADB
	NODE_SCALAR(bool,cluster_hashtable_first)
#endif
END_NODE(HashJoin)
#endif /* NO_NODE_HashJoin */

#ifndef NO_NODE_Material
BEGIN_NODE(Material)
	NODE_BASE2(Plan,plan)
END_NODE(Material)
#endif /* NO_NODE_Material */

#ifndef NO_NODE_ResultCache
BEGIN_NODE(ResultCache)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(int,numKeys)
	NODE_SCALAR_POINT(Oid,hashOperators,NODE_ARG_->numKeys)
	NODE_SCALAR_POINT(Oid,collations,NODE_ARG_->numKeys)
	NODE_NODE(List,param_exprs)
	NODE_SCALAR(bool,singlerow)
	NODE_SCALAR(uint32,est_entries)
END_NODE(ResultCache)
#endif /* NO_NODE_ResultCache */

#ifndef NO_NODE_Sort
BEGIN_NODE(Sort)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,sortColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,sortOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,collations,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(bool,nullsFirst,NODE_ARG_->numCols)
#ifdef ADB
	NODE_SCALAR(bool,srt_start_merge)
#endif
END_NODE(Sort)
#endif /* NO_NODE_Sort */

#ifndef NO_NODE_IncrementalSort
BEGIN_NODE(IncrementalSort)
	NODE_BASE2(Sort,sort)
	NODE_SCALAR(int,nPresortedCols)
END_NODE(IncrementalSort)
#endif /* NO_NODE_IncrementalSort */

#ifndef NO_NODE_Group
BEGIN_NODE(Group)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,grpColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,grpOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,grpCollations,NODE_ARG_->numCols)
END_NODE(Group)
#endif /* NO_NODE_Group */

#ifndef NO_NODE_Agg
BEGIN_NODE(Agg)
	NODE_BASE2(Plan,plan)
	NODE_ENUM(AggStrategy,aggstrategy)
	NODE_ENUM(AggSplit,aggsplit)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,grpColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,grpOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,grpCollations,NODE_ARG_->numCols)
	NODE_SCALAR(long,numGroups)
	NODE_SCALAR(uint64,transitionSpace)
	NODE_BITMAPSET(Bitmapset,aggParams)
	NODE_NODE(List,groupingSets)
	NODE_NODE(List,chain)
#ifdef ADB_EXT
	NODE_SCALAR(uint32,num_batches)
#endif
#ifdef ADB
	NODE_NODE(List,exec_nodes)
	NODE_SCALAR(bool,skip_trans)
#endif
END_NODE(Agg)
#endif /* NO_NODE_Agg */

#ifndef NO_NODE_WindowAgg
BEGIN_NODE(WindowAgg)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(Index,winref)
	NODE_SCALAR(int,partNumCols)
	NODE_SCALAR_POINT(AttrNumber,partColIdx,NODE_ARG_->partNumCols)
	NODE_SCALAR_POINT(Oid,partOperators,NODE_ARG_->partNumCols)
	NODE_SCALAR_POINT(Oid,partCollations,NODE_ARG_->partNumCols)
	NODE_SCALAR(int,ordNumCols)
	NODE_SCALAR_POINT(AttrNumber,ordColIdx,NODE_ARG_->ordNumCols)
	NODE_SCALAR_POINT(Oid,ordOperators,NODE_ARG_->ordNumCols)
	NODE_SCALAR_POINT(Oid,ordCollations,NODE_ARG_->ordNumCols)
	NODE_SCALAR(int,frameOptions)
	NODE_NODE(Node,startOffset)
	NODE_NODE(Node,endOffset)
	NODE_SCALAR(Oid,startInRangeFunc)
	NODE_SCALAR(Oid,endInRangeFunc)
	NODE_SCALAR(Oid,inRangeColl)
	NODE_SCALAR(bool,inRangeAsc)
	NODE_SCALAR(bool,inRangeNullsFirst)
END_NODE(WindowAgg)
#endif /* NO_NODE_WindowAgg */

#ifndef NO_NODE_Unique
BEGIN_NODE(Unique)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,uniqColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,uniqOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,uniqCollations,NODE_ARG_->numCols)
END_NODE(Unique)
#endif /* NO_NODE_Unique */

#ifndef NO_NODE_Gather
BEGIN_NODE(Gather)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(int,num_workers)
	NODE_SCALAR(int,rescan_param)
	NODE_SCALAR(bool,single_copy)
	NODE_SCALAR(bool,invisible)
	NODE_BITMAPSET(Bitmapset,initParam)
END_NODE(Gather)
#endif /* NO_NODE_Gather */

#ifndef NO_NODE_GatherMerge
BEGIN_NODE(GatherMerge)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(int,num_workers)
	NODE_SCALAR(int,rescan_param)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,sortColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,sortOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,collations,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(bool,nullsFirst,NODE_ARG_->numCols)
	NODE_BITMAPSET(Bitmapset,initParam)
END_NODE(GatherMerge)
#endif /* NO_NODE_GatherMerge */

#ifndef NO_NODE_Hash
BEGIN_NODE(Hash)
	NODE_BASE2(Plan,plan)
	NODE_NODE(List,hashkeys)
	NODE_OID(class,skewTable)
	NODE_SCALAR(AttrNumber,skewColumn)
	NODE_SCALAR(bool,skewInherit)
	NODE_SCALAR(double,rows_total)
END_NODE(Hash)
#endif /* NO_NODE_Hash */

#ifndef NO_NODE_SetOp
BEGIN_NODE(SetOp)
	NODE_BASE2(Plan,plan)
	NODE_ENUM(SetOpCmd,cmd)
	NODE_ENUM(SetOpStrategy,strategy)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,dupColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,dupOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,dupCollations,NODE_ARG_->numCols)
	NODE_SCALAR(AttrNumber,flagColIdx)
	NODE_SCALAR(int,firstFlag)
	NODE_SCALAR(long,numGroups)
END_NODE(SetOp)
#endif /* NO_NODE_SetOp */

#ifndef NO_NODE_LockRows
BEGIN_NODE(LockRows)
	NODE_BASE2(Plan,plan)
	NODE_NODE(List,rowMarks)
	NODE_SCALAR(int,epqParam)
END_NODE(LockRows)
#endif /* NO_NODE_LockRows */

#ifndef NO_NODE_Limit
BEGIN_NODE(Limit)
	NODE_BASE2(Plan,plan)
	NODE_NODE(Node,limitOffset)
	NODE_NODE(Node,limitCount)
	NODE_ENUM(LimitOption,limitOption)
	NODE_SCALAR(int,uniqNumCols)
	NODE_SCALAR_POINT(AttrNumber,uniqColIdx,NODE_ARG_->uniqNumCols)
	NODE_SCALAR_POINT(Oid,uniqOperators,NODE_ARG_->uniqNumCols)
	NODE_SCALAR_POINT(Oid,uniqCollations,NODE_ARG_->uniqNumCols)
END_NODE(Limit)
#endif /* NO_NODE_Limit */

#ifdef ADB_EXT

#ifndef NO_NODE_BatchSort
BEGIN_NODE(BatchSort)
	NODE_BASE2(Plan,plan)
	NODE_SCALAR(int,numSortCols)
	NODE_SCALAR(int,numGroupCols)
	NODE_SCALAR(int,numBatches)
	NODE_SCALAR_POINT(AttrNumber,sortColIdx,NODE_ARG_->numSortCols)
	NODE_SCALAR_POINT(Oid,sortOperators,NODE_ARG_->numSortCols)
	NODE_SCALAR_POINT(Oid,collations,NODE_ARG_->numSortCols)
	NODE_SCALAR_POINT(bool,nullsFirst,NODE_ARG_->numSortCols)
	NODE_SCALAR_POINT(AttrNumber,grpColIdx,NODE_ARG_->numGroupCols)
END_NODE(BatchSort)
#endif /* NO_NODE_BatchSort */

#endif

#ifdef ADB_GRAM_ORA

#ifndef NO_NODE_ConnectByPlan
BEGIN_NODE(ConnectByPlan)
	NODE_BASE2(Plan,plan)
	NODE_NODE(List,save_targetlist)
	NODE_NODE(List,hash_quals)
	NODE_NODE(List,join_quals)
	NODE_NODE(List,start_with)
	NODE_SCALAR(bool,no_cycle)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,sortColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,sortOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,collations,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(bool,nullsFirst,NODE_ARG_->numCols)
	NODE_NODE(List,sort_targetlist)
END_NODE(ConnectByPlan)
#endif /* NO_NODE_ConnectByPlan */

#endif

#ifndef NO_NODE_NestLoopParam
BEGIN_NODE(NestLoopParam)
	NODE_SCALAR(int,paramno)
	NODE_NODE(Var,paramval)
END_NODE(NestLoopParam)
#endif /* NO_NODE_NestLoopParam */

#ifndef NO_NODE_PlanRowMark
BEGIN_NODE(PlanRowMark)
	NODE_SCALAR(Index,rti)
	NODE_SCALAR(Index,prti)
	NODE_SCALAR(Index,rowmarkId)
	NODE_ENUM(RowMarkType,markType)
	NODE_SCALAR(int,allMarkTypes)
	NODE_ENUM(LockClauseStrength,strength)
	NODE_ENUM(LockWaitPolicy,waitPolicy)
	NODE_SCALAR(bool,isParent)
END_NODE(PlanRowMark)
#endif /* NO_NODE_PlanRowMark */

#ifndef NO_NODE_PartitionPruneInfo
BEGIN_NODE(PartitionPruneInfo)
	NODE_NODE(List,prune_infos)
	NODE_BITMAPSET(Bitmapset,other_subplans)
END_NODE(PartitionPruneInfo)
#endif /* NO_NODE_PartitionPruneInfo */

#ifndef NO_NODE_PartitionedRelPruneInfo
BEGIN_NODE(PartitionedRelPruneInfo)
	NODE_SCALAR(Index,rtindex)
	NODE_BITMAPSET(Bitmapset,present_parts)
	NODE_SCALAR(int,nparts)
	NODE_SCALAR_POINT(int,subplan_map,NODE_ARG_->nparts)
	NODE_SCALAR_POINT(int,subpart_map,NODE_ARG_->nparts)
	NODE_SCALAR_POINT(Oid,relid_map,NODE_ARG_->nparts)
	NODE_NODE(List,initial_pruning_steps)
	NODE_NODE(List,exec_pruning_steps)
	NODE_BITMAPSET(Bitmapset,execparamids)
END_NODE(PartitionedRelPruneInfo)
#endif /* NO_NODE_PartitionedRelPruneInfo */

#ifndef NO_NODE_PartitionPruneStepOp
BEGIN_NODE(PartitionPruneStepOp)
	NODE_STRUCT_MEB(PartitionPruneStep,step)
	NODE_SCALAR(StrategyNumber,opstrategy)
	NODE_NODE(List,exprs)
	NODE_NODE(List,cmpfns)
	NODE_BITMAPSET(Bitmapset,nullkeys)
END_NODE(PartitionPruneStepOp)
#endif /* NO_NODE_PartitionPruneStepOp */

#ifndef NO_NODE_PartitionPruneStepCombine
BEGIN_NODE(PartitionPruneStepCombine)
	NODE_STRUCT_MEB(PartitionPruneStep,step)
	NODE_ENUM(PartitionPruneCombineOp,combineOp)
	NODE_NODE(List,source_stepids)
END_NODE(PartitionPruneStepCombine)
#endif /* NO_NODE_PartitionPruneStepCombine */

#ifndef NO_NODE_PlanInvalItem
BEGIN_NODE(PlanInvalItem)
	NODE_SCALAR(int,cacheId)
	NODE_SCALAR(uint32,hashValue)
END_NODE(PlanInvalItem)
#endif /* NO_NODE_PlanInvalItem */

#ifdef ADB

#ifndef NO_NODE_ExecNodes
BEGIN_NODE(ExecNodes)
	NODE_ENUM(RelationAccessType,accesstype)
	NODE_SCALAR(char,baselocatortype)
	NODE_SCALAR(Oid,en_relid)
	NODE_OID(proc,en_funcid)
	NODE_NODE(List,en_expr)
	NODE_NODE(List,en_dist_vars)
	NODE_NODE(List,nodeids)
END_NODE(ExecNodes)
#endif /* NO_NODE_ExecNodes */

#ifndef NO_NODE_SimpleSort
BEGIN_NODE(SimpleSort)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,sortColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,sortOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,sortCollations,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(bool,nullsFirst,NODE_ARG_->numCols)
END_NODE(SimpleSort)
#endif /* NO_NODE_SimpleSort */

#ifndef NO_NODE_RemoteQuery
BEGIN_NODE(RemoteQuery)
	NODE_BASE2(Scan,scan)
	NODE_ENUM(ExecDirectType,exec_direct_type)
	NODE_STRING(sql_statement)
#ifdef ADB
	NODE_StringInfo(sql_node)
#endif
	NODE_NODE(ExecNodes,exec_nodes)
	NODE_NODE(Expr,reduce_expr)
	NODE_ENUM(CombineType,combine_type)
	NODE_SCALAR(bool,read_only)
	NODE_SCALAR(bool,force_autocommit)
	NODE_STRING(statement)
	NODE_STRING(cursor)
	NODE_SCALAR(int,rq_num_params)
	NODE_SCALAR_POINT(Oid,rq_param_types,NODE_ARG_->rq_num_params)
	NODE_SCALAR(bool,rq_params_internal)
	NODE_ENUM(RemoteQueryExecType,exec_type)
	NODE_SCALAR(bool,is_temp)
	NODE_SCALAR(bool,rq_finalise_aggs)
	NODE_SCALAR(bool,rq_sortgroup_colno)
	NODE_NODE(Query,remote_query)
	NODE_NODE(List,base_tlist)
	NODE_NODE(List,coord_var_tlist)
	NODE_NODE(List,query_var_tlist)
	NODE_SCALAR(bool,has_row_marks)
	NODE_SCALAR(bool,rq_save_command_id)
	NODE_SCALAR(bool,rq_use_pk_for_rep_change)
	NODE_SCALAR(int,rq_max_param_num)
END_NODE(RemoteQuery)
#endif /* NO_NODE_RemoteQuery */

#ifndef NO_NODE_AlterNodeStmt
BEGIN_NODE(AlterNodeStmt)
	NODE_SCALAR(uint8,expansion_type)
	NODE_STRING(node_name)
	NODE_NODE(List,options)
	NODE_NODE(List,node_list)
END_NODE(AlterNodeStmt)
#endif /* NO_NODE_AlterNodeStmt */

#ifndef NO_NODE_CreateNodeStmt
BEGIN_NODE(CreateNodeStmt)
	NODE_STRING(node_name)
	NODE_STRING(node_mastername)
	NODE_NODE(List,options)
	NODE_NODE(List,node_list)
END_NODE(CreateNodeStmt)
#endif /* NO_NODE_CreateNodeStmt */

#ifndef NO_NODE_DropNodeStmt
BEGIN_NODE(DropNodeStmt)
	NODE_STRING(node_name)
	NODE_NODE(List,node_list)
END_NODE(DropNodeStmt)
#endif /* NO_NODE_DropNodeStmt */

#ifndef NO_NODE_CreateGroupStmt
BEGIN_NODE(CreateGroupStmt)
	NODE_STRING(group_name)
	NODE_NODE(List,nodes)
END_NODE(CreateGroupStmt)
#endif /* NO_NODE_CreateGroupStmt */

#ifndef NO_NODE_DropGroupStmt
BEGIN_NODE(DropGroupStmt)
	NODE_STRING(group_name)
END_NODE(DropGroupStmt)
#endif /* NO_NODE_DropGroupStmt */

#ifndef NO_NODE_CreateAuxStmt
BEGIN_NODE(CreateAuxStmt)
	NODE_NODE(Node,create_stmt)
	NODE_NODE(Node,index_stmt)
	NODE_NODE(RangeVar,master_relation)
	NODE_STRING(aux_column)
END_NODE(CreateAuxStmt)
#endif /* NO_NODE_CreateAuxStmt */

#ifndef NO_NODE_PaddingAuxDataStmt
BEGIN_NODE(PaddingAuxDataStmt)
	NODE_NODE(RangeVar,masterrv)
	NODE_SCALAR(bool,truncaux)
	NODE_NODE(List,auxrvlist)
END_NODE(PaddingAuxDataStmt)
#endif /* NO_NODE_PaddingAuxDataStmt */

#ifndef NO_NODE_ClusterGather
BEGIN_NODE(ClusterGather)
	NODE_BASE2(Plan,plan)
	NODE_NODE(List,rnodes)
	NODE_ENUM(ClusterGatherType,gatherType)
	NODE_SCALAR(bool,check_rep_processed)
END_NODE(ClusterGather)
#endif /* NO_NODE_ClusterGather */

#ifndef NO_NODE_ClusterMergeGather
BEGIN_NODE(ClusterMergeGather)
	NODE_BASE2(Plan,plan)
	NODE_NODE(List,rnodes)
	NODE_ENUM(ClusterGatherType,gatherType)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,sortColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,sortOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,collations,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(bool,nullsFirst,NODE_ARG_->numCols)
END_NODE(ClusterMergeGather)
#endif /* NO_NODE_ClusterMergeGather */

#ifndef NO_NODE_ClusterReduce
BEGIN_NODE(ClusterReduce)
	NODE_BASE2(Plan,plan)
	NODE_NODE(Expr,reduce)
	NODE_NODE(Expr,special_reduce)
	NODE_NODE(List,reduce_oids)
	NODE_SCALAR(Oid,special_node)
	NODE_SCALAR(int,numCols)
	NODE_SCALAR_POINT(AttrNumber,sortColIdx,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,sortOperators,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(Oid,collations,NODE_ARG_->numCols)
	NODE_SCALAR_POINT(bool,nullsFirst,NODE_ARG_->numCols)
	NODE_SCALAR(uint32,reduce_flags)
	NODE_BITMAPSET(Bitmapset,ignore_params)
END_NODE(ClusterReduce)
#endif /* NO_NODE_ClusterReduce */

#ifndef NO_NODE_ReduceScan
BEGIN_NODE(ReduceScan)
	NODE_BASE2(Plan,plan)
	NODE_NODE(List,param_hash_keys)
	NODE_NODE(List,scan_hash_keys)
END_NODE(ReduceScan)
#endif /* NO_NODE_ReduceScan */

#ifndef NO_NODE_EmptyResult
BEGIN_NODE(EmptyResult)
	NODE_BASE2(Plan,plan)
	NODE_NODE(List,subPlan)
	NODE_ENUM(NodeTag,typeFrom)
	NODE_SCALAR(bool,isshared)
END_NODE(EmptyResult)
#endif /* NO_NODE_EmptyResult */

#ifndef NO_NODE_ParamTuplestoreScan
BEGIN_NODE(ParamTuplestoreScan)
	NODE_BASE2(Scan,scan)
	NODE_NODE(List,vars)
	NODE_SCALAR(int,paramid)
END_NODE(ParamTuplestoreScan)
#endif /* NO_NODE_ParamTuplestoreScan */

#endif

#ifdef ADB_EXT

#endif

#ifdef ADB

#endif

#ifdef ADB_GRAM_ORA

#endif

#ifndef NO_NODE_Alias
BEGIN_NODE(Alias)
	NODE_STRING(aliasname)
	NODE_NODE(List,colnames)
END_NODE(Alias)
#endif /* NO_NODE_Alias */

#ifndef NO_NODE_RangeVar
BEGIN_NODE(RangeVar)
	NODE_STRING(catalogname)
	NODE_STRING(schemaname)
	NODE_STRING(relname)
	NODE_SCALAR(bool,inh)
	NODE_SCALAR(char,relpersistence)
	NODE_NODE(Alias,alias)
	NODE_SCALAR(int,location)
END_NODE(RangeVar)
#endif /* NO_NODE_RangeVar */

#ifndef NO_NODE_TableFunc
BEGIN_NODE(TableFunc)
	NODE_NODE(List,ns_uris)
	NODE_NODE(List,ns_names)
	NODE_NODE(Node,docexpr)
	NODE_NODE(Node,rowexpr)
	NODE_NODE(List,colnames)
	NODE_NODE(List,coltypes)
	NODE_NODE(List,coltypmods)
	NODE_NODE(List,colcollations)
	NODE_NODE(List,colexprs)
	NODE_NODE(List,coldefexprs)
	NODE_BITMAPSET(Bitmapset,notnulls)
	NODE_SCALAR(int,ordinalitycol)
	NODE_SCALAR(int,location)
END_NODE(TableFunc)
#endif /* NO_NODE_TableFunc */

#ifndef NO_NODE_Expr
BEGIN_NODE(Expr)
END_NODE(Expr)
#endif /* NO_NODE_Expr */

#ifndef NO_NODE_Var
BEGIN_NODE(Var)
	NODE_BASE2(Expr,xpr)
	NODE_SCALAR(Index,varno)
	NODE_SCALAR(AttrNumber,varattno)
	NODE_OID(type,vartype)
	NODE_SCALAR(int32,vartypmod)
	NODE_OID(collation,varcollid)
	NODE_SCALAR(Index,varlevelsup)
	NODE_SCALAR(Index,varnosyn)
	NODE_SCALAR(AttrNumber,varattnosyn)
	NODE_SCALAR(int,location)
END_NODE(Var)
#endif /* NO_NODE_Var */

#ifndef NO_NODE_Const
BEGIN_NODE(Const)
	NODE_OID(type,consttype)
	NODE_SCALAR(int32,consttypmod)
	NODE_OID(collation,constcollid)
	NODE_SCALAR(int,constlen)
	NODE_SCALAR(bool,constisnull)	/* offset not here */
	NODE_SCALAR(bool,constbyval)	/* offset not here */
	NODE_DATUM(Datum,constvalue,NODE_ARG_->consttype, NODE_ARG_->constisnull)
	NODE_LOCATION(int,location)
END_NODE(Const)
#endif /* NO_NODE_Const */

#ifndef NO_NODE_Param
BEGIN_NODE(Param)
	NODE_BASE2(Expr,xpr)
	NODE_ENUM(ParamKind,paramkind)
	NODE_SCALAR(int,paramid)
	NODE_OID(type,paramtype)
	NODE_SCALAR(int32,paramtypmod)
	NODE_OID(collation,paramcollid)
	NODE_SCALAR(int,location)
END_NODE(Param)
#endif /* NO_NODE_Param */

#ifndef NO_NODE_Aggref
BEGIN_NODE(Aggref)
	NODE_BASE2(Expr,xpr)
	NODE_OID(proc,aggfnoid)
	NODE_OID(type,aggtype)
	NODE_OID(collation,aggcollid)
	NODE_OID(collation,inputcollid)
	NODE_OID(type,aggtranstype)
#ifdef ADB
	NODE_OID(type,aggtrantype)
	NODE_SCALAR(bool,agghas_collectfn)
#endif
	NODE_OID_LIST(type,aggargtypes)
	NODE_NODE(List,aggdirectargs)
	NODE_NODE(List,args)
	NODE_NODE(List,aggorder)
	NODE_NODE(List,aggdistinct)
	NODE_NODE(Expr,aggfilter)
#ifdef ADB_EXT
	NODE_NODE(List,aggkeep)
	NODE_SCALAR(bool,rank_first)
#endif
	NODE_SCALAR(bool,aggstar)
	NODE_SCALAR(bool,aggvariadic)
	NODE_SCALAR(char,aggkind)
	NODE_SCALAR(Index,agglevelsup)
	NODE_ENUM(AggSplit,aggsplit)
	NODE_SCALAR(int,aggno)
	NODE_SCALAR(int,aggtransno)
	NODE_SCALAR(int,location)
END_NODE(Aggref)
#endif /* NO_NODE_Aggref */

#ifndef NO_NODE_GroupingFunc
BEGIN_NODE(GroupingFunc)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(List,args)
	NODE_NODE(List,refs)
	NODE_NODE(List,cols)
	NODE_SCALAR(Index,agglevelsup)
	NODE_SCALAR(int,location)
END_NODE(GroupingFunc)
#endif /* NO_NODE_GroupingFunc */

#ifndef NO_NODE_WindowFunc
BEGIN_NODE(WindowFunc)
	NODE_BASE2(Expr,xpr)
	NODE_OID(proc,winfnoid)
	NODE_OID(type,wintype)
	NODE_OID(collation,wincollid)
	NODE_OID(collation,inputcollid)
	NODE_NODE(List,args)
	NODE_NODE(Expr,aggfilter)
	NODE_SCALAR(Index,winref)
	NODE_SCALAR(bool,winstar)
	NODE_SCALAR(bool,winagg)
	NODE_SCALAR(int,location)
END_NODE(WindowFunc)
#endif /* NO_NODE_WindowFunc */

#ifndef NO_NODE_SubscriptingRef
BEGIN_NODE(SubscriptingRef)
	NODE_BASE2(Expr,xpr)
	NODE_OID(type,refcontainertype)
	NODE_OID(type,refelemtype)
	NODE_SCALAR(Oid,refrestype)
	NODE_SCALAR(int32,reftypmod)
	NODE_OID(collation,refcollid)
	NODE_NODE(List,refupperindexpr)
	NODE_NODE(List,reflowerindexpr)
	NODE_NODE(Expr,refexpr)
	NODE_NODE(Expr,refassgnexpr)
END_NODE(SubscriptingRef)
#endif /* NO_NODE_SubscriptingRef */

#ifndef NO_NODE_FuncExpr
BEGIN_NODE(FuncExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(proc,funcid)
	NODE_OID(type,funcresulttype)
	NODE_SCALAR(bool,funcretset)
	NODE_SCALAR(bool,funcvariadic)
	NODE_ENUM(CoercionForm,funcformat)
	NODE_OID(collation,funccollid)
	NODE_OID(collation,inputcollid)
	NODE_NODE(List,args)
	NODE_SCALAR(int,location)
END_NODE(FuncExpr)
#endif /* NO_NODE_FuncExpr */

#ifndef NO_NODE_NamedArgExpr
BEGIN_NODE(NamedArgExpr)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_STRING(name)
	NODE_SCALAR(int,argnumber)
	NODE_SCALAR(int,location)
END_NODE(NamedArgExpr)
#endif /* NO_NODE_NamedArgExpr */

#ifndef NO_NODE_OpExpr
BEGIN_NODE(OpExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(operator,opno)
	NODE_OID(proc,opfuncid)
	NODE_OID(type,opresulttype)
	NODE_SCALAR(bool,opretset)
	NODE_OID(collation,opcollid)
	NODE_OID(collation,inputcollid)
	NODE_NODE(List,args)
	NODE_SCALAR(int,location)
END_NODE(OpExpr)
#endif /* NO_NODE_OpExpr */

#ifndef NO_NODE_DistinctExpr
NODE_SAME(DistinctExpr, OpExpr)
#endif /* NO_NODE_DistinctExpr */

#ifndef NO_NODE_NullIfExpr
NODE_SAME(NullIfExpr, OpExpr)
#endif /* NO_NODE_NullIfExpr */

#ifndef NO_NODE_ScalarArrayOpExpr
BEGIN_NODE(ScalarArrayOpExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(operator,opno)
	NODE_OID(proc,opfuncid)
	NODE_SCALAR(Oid,hashfuncid)
	NODE_SCALAR(bool,useOr)
	NODE_OID(collation,inputcollid)
	NODE_NODE(List,args)
	NODE_SCALAR(int,location)
END_NODE(ScalarArrayOpExpr)
#endif /* NO_NODE_ScalarArrayOpExpr */

#ifndef NO_NODE_BoolExpr
BEGIN_NODE(BoolExpr)
	NODE_BASE2(Expr,xpr)
	NODE_ENUM(BoolExprType,boolop)
	NODE_NODE(List,args)
	NODE_SCALAR(int,location)
END_NODE(BoolExpr)
#endif /* NO_NODE_BoolExpr */

#ifndef NO_NODE_SubLink
BEGIN_NODE(SubLink)
	NODE_BASE2(Expr,xpr)
	NODE_ENUM(SubLinkType,subLinkType)
	NODE_SCALAR(int,subLinkId)
	NODE_NODE(Node,testexpr)
	NODE_NODE(List,operName)
	NODE_NODE(Node,subselect)
	NODE_SCALAR(int,location)
END_NODE(SubLink)
#endif /* NO_NODE_SubLink */

#ifndef NO_NODE_SubPlan
BEGIN_NODE(SubPlan)
	NODE_BASE2(Expr,xpr)
	NODE_ENUM(SubLinkType,subLinkType)
	NODE_NODE(Node,testexpr)
	NODE_NODE(List,paramIds)
	NODE_SCALAR(int,plan_id)
	NODE_STRING(plan_name)
	NODE_OID(type,firstColType)
	NODE_SCALAR(int32,firstColTypmod)
	NODE_OID(collation,firstColCollation)
	NODE_SCALAR(bool,useHashTable)
#ifdef ADB
	NODE_SCALAR(bool,useHashStore)
#endif
	NODE_SCALAR(bool,unknownEqFalse)
	NODE_SCALAR(bool,parallel_safe)
	NODE_NODE(List,setParam)
	NODE_NODE(List,parParam)
	NODE_NODE(List,args)
	NODE_SCALAR(Cost,startup_cost)
	NODE_SCALAR(Cost,per_call_cost)
#ifdef ADB
	NODE_SCALAR(Cost,cluster_startup_cost)
	NODE_SCALAR(Cost,cluster_per_call_cost)
#endif
END_NODE(SubPlan)
#endif /* NO_NODE_SubPlan */

#ifndef NO_NODE_AlternativeSubPlan
BEGIN_NODE(AlternativeSubPlan)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(List,subplans)
END_NODE(AlternativeSubPlan)
#endif /* NO_NODE_AlternativeSubPlan */

#ifndef NO_NODE_FieldSelect
BEGIN_NODE(FieldSelect)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_SCALAR(AttrNumber,fieldnum)
	NODE_OID(type,resulttype)
	NODE_SCALAR(int32,resulttypmod)
	NODE_OID(collation,resultcollid)
END_NODE(FieldSelect)
#endif /* NO_NODE_FieldSelect */

#ifndef NO_NODE_FieldStore
BEGIN_NODE(FieldStore)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_NODE(List,newvals)
	NODE_NODE(List,fieldnums)
	NODE_OID(type,resulttype)
END_NODE(FieldStore)
#endif /* NO_NODE_FieldStore */

#ifndef NO_NODE_RelabelType
BEGIN_NODE(RelabelType)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_OID(type,resulttype)
	NODE_SCALAR(int32,resulttypmod)
	NODE_OID(collation,resultcollid)
	NODE_ENUM(CoercionForm,relabelformat)
	NODE_SCALAR(int,location)
END_NODE(RelabelType)
#endif /* NO_NODE_RelabelType */

#ifndef NO_NODE_CoerceViaIO
BEGIN_NODE(CoerceViaIO)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_OID(type,resulttype)
	NODE_OID(collation,resultcollid)
	NODE_ENUM(CoercionForm,coerceformat)
	NODE_SCALAR(int,location)
END_NODE(CoerceViaIO)
#endif /* NO_NODE_CoerceViaIO */

#ifndef NO_NODE_ArrayCoerceExpr
BEGIN_NODE(ArrayCoerceExpr)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_NODE(Expr,elemexpr)
	NODE_OID(type,resulttype)
	NODE_SCALAR(int32,resulttypmod)
	NODE_OID(collation,resultcollid)
	NODE_ENUM(CoercionForm,coerceformat)
	NODE_SCALAR(int,location)
END_NODE(ArrayCoerceExpr)
#endif /* NO_NODE_ArrayCoerceExpr */

#ifndef NO_NODE_ConvertRowtypeExpr
BEGIN_NODE(ConvertRowtypeExpr)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_OID(type,resulttype)
	NODE_ENUM(CoercionForm,convertformat)
	NODE_SCALAR(int,location)
END_NODE(ConvertRowtypeExpr)
#endif /* NO_NODE_ConvertRowtypeExpr */

#ifndef NO_NODE_CollateExpr
BEGIN_NODE(CollateExpr)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_OID(collation,collOid)
	NODE_SCALAR(int,location)
END_NODE(CollateExpr)
#endif /* NO_NODE_CollateExpr */

#ifndef NO_NODE_CaseExpr
BEGIN_NODE(CaseExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(type,casetype)
	NODE_OID(collation,casecollid)
	NODE_NODE(Expr,arg)
	NODE_NODE(List,args)
	NODE_NODE(Expr,defresult)
#if defined(ADB) || defined(ADB_GRAM_ORA)
	NODE_SCALAR(bool,isdecode)
#endif
	NODE_SCALAR(int,location)
END_NODE(CaseExpr)
#endif /* NO_NODE_CaseExpr */

#ifndef NO_NODE_CaseWhen
BEGIN_NODE(CaseWhen)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,expr)
	NODE_NODE(Expr,result)
	NODE_SCALAR(int,location)
END_NODE(CaseWhen)
#endif /* NO_NODE_CaseWhen */

#ifndef NO_NODE_CaseTestExpr
BEGIN_NODE(CaseTestExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(type,typeId)
	NODE_SCALAR(int32,typeMod)
	NODE_OID(collation,collation)
END_NODE(CaseTestExpr)
#endif /* NO_NODE_CaseTestExpr */

#ifndef NO_NODE_ArrayExpr
BEGIN_NODE(ArrayExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(type,array_typeid)
	NODE_OID(collation,array_collid)
	NODE_OID(type,element_typeid)
	NODE_NODE(List,elements)
	NODE_SCALAR(bool,multidims)
	NODE_SCALAR(int,location)
END_NODE(ArrayExpr)
#endif /* NO_NODE_ArrayExpr */

#ifndef NO_NODE_RowExpr
BEGIN_NODE(RowExpr)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(List,args)
	NODE_OID(type,row_typeid)
	NODE_ENUM(CoercionForm,row_format)
	NODE_NODE(List,colnames)
	NODE_SCALAR(int,location)
END_NODE(RowExpr)
#endif /* NO_NODE_RowExpr */

#ifndef NO_NODE_RowCompareExpr
BEGIN_NODE(RowCompareExpr)
	NODE_BASE2(Expr,xpr)
	NODE_ENUM(RowCompareType,rctype)
	NODE_NODE(List,opnos)
	NODE_NODE(List,opfamilies)
	NODE_NODE(List,inputcollids)
	NODE_NODE(List,largs)
	NODE_NODE(List,rargs)
END_NODE(RowCompareExpr)
#endif /* NO_NODE_RowCompareExpr */

#ifndef NO_NODE_CoalesceExpr
BEGIN_NODE(CoalesceExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(type,coalescetype)
	NODE_OID(collation,coalescecollid)
	NODE_NODE(List,args)
	NODE_SCALAR(int,location)
END_NODE(CoalesceExpr)
#endif /* NO_NODE_CoalesceExpr */

#ifndef NO_NODE_MinMaxExpr
BEGIN_NODE(MinMaxExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(type,minmaxtype)
	NODE_OID(collation,minmaxcollid)
	NODE_OID(collation,inputcollid)
	NODE_ENUM(MinMaxOp,op)
	NODE_NODE(List,args)
	NODE_SCALAR(int,location)
END_NODE(MinMaxExpr)
#endif /* NO_NODE_MinMaxExpr */

#ifndef NO_NODE_SQLValueFunction
BEGIN_NODE(SQLValueFunction)
	NODE_BASE2(Expr,xpr)
	NODE_ENUM(SQLValueFunctionOp,op)
	NODE_SCALAR(Oid,type)
	NODE_SCALAR(int32,typmod)
	NODE_SCALAR(int,location)
END_NODE(SQLValueFunction)
#endif /* NO_NODE_SQLValueFunction */

#ifndef NO_NODE_XmlExpr
BEGIN_NODE(XmlExpr)
	NODE_BASE2(Expr,xpr)
	NODE_ENUM(XmlExprOp,op)
	NODE_STRING(name)
	NODE_NODE(List,named_args)
	NODE_NODE(List,arg_names)
	NODE_NODE(List,args)
	NODE_ENUM(XmlOptionType,xmloption)
	NODE_OID(type,type)
	NODE_SCALAR(int32,typmod)
	NODE_SCALAR(int,location)
END_NODE(XmlExpr)
#endif /* NO_NODE_XmlExpr */

#ifndef NO_NODE_NullTest
BEGIN_NODE(NullTest)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_ENUM(NullTestType,nulltesttype)
	NODE_SCALAR(bool,argisrow)
	NODE_SCALAR(int,location)
END_NODE(NullTest)
#endif /* NO_NODE_NullTest */

#ifndef NO_NODE_BooleanTest
BEGIN_NODE(BooleanTest)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_ENUM(BoolTestType,booltesttype)
	NODE_SCALAR(int,location)
END_NODE(BooleanTest)
#endif /* NO_NODE_BooleanTest */

#ifndef NO_NODE_CoerceToDomain
BEGIN_NODE(CoerceToDomain)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,arg)
	NODE_OID(type,resulttype)
	NODE_SCALAR(int32,resulttypmod)
	NODE_OID(collation,resultcollid)
	NODE_ENUM(CoercionForm,coercionformat)
	NODE_SCALAR(int,location)
END_NODE(CoerceToDomain)
#endif /* NO_NODE_CoerceToDomain */

#ifndef NO_NODE_CoerceToDomainValue
BEGIN_NODE(CoerceToDomainValue)
	NODE_BASE2(Expr,xpr)
	NODE_OID(type,typeId)
	NODE_SCALAR(int32,typeMod)
	NODE_OID(collation,collation)
	NODE_SCALAR(int,location)
END_NODE(CoerceToDomainValue)
#endif /* NO_NODE_CoerceToDomainValue */

#ifndef NO_NODE_SetToDefault
BEGIN_NODE(SetToDefault)
	NODE_BASE2(Expr,xpr)
	NODE_OID(type,typeId)
	NODE_SCALAR(int32,typeMod)
	NODE_OID(collation,collation)
	NODE_SCALAR(int,location)
END_NODE(SetToDefault)
#endif /* NO_NODE_SetToDefault */

#ifndef NO_NODE_CurrentOfExpr
BEGIN_NODE(CurrentOfExpr)
	NODE_BASE2(Expr,xpr)
	NODE_SCALAR(Index,cvarno)
	NODE_STRING(cursor_name)
	NODE_SCALAR(int,cursor_param)
END_NODE(CurrentOfExpr)
#endif /* NO_NODE_CurrentOfExpr */

#ifndef NO_NODE_NextValueExpr
BEGIN_NODE(NextValueExpr)
	NODE_BASE2(Expr,xpr)
	NODE_OID(class,seqid)
	NODE_SCALAR(Oid,typeId)
END_NODE(NextValueExpr)
#endif /* NO_NODE_NextValueExpr */

#ifdef ADB_GRAM_ORA

#ifndef NO_NODE_RownumExpr
BEGIN_NODE(RownumExpr)
	NODE_SCALAR(int,location)
END_NODE(RownumExpr)
#endif /* NO_NODE_RownumExpr */

#ifndef NO_NODE_LevelExpr
BEGIN_NODE(LevelExpr)
	NODE_SCALAR(int,location)
END_NODE(LevelExpr)
#endif /* NO_NODE_LevelExpr */

#ifndef NO_NODE_SysConnectByPathExpr
BEGIN_NODE(SysConnectByPathExpr)
	NODE_SCALAR(AttrNumber,priorAttno)
	NODE_NODE(List,args)
	NODE_SCALAR(Oid,collation)
	NODE_SCALAR(int,location)
END_NODE(SysConnectByPathExpr)
#endif /* NO_NODE_SysConnectByPathExpr */

#ifndef NO_NODE_ConnectByRootExpr
BEGIN_NODE(ConnectByRootExpr)
	NODE_NODE(Node,expr)
	NODE_SCALAR(AttrNumber,priorAttno)
	NODE_SCALAR(int,location)
END_NODE(ConnectByRootExpr)
#endif /* NO_NODE_ConnectByRootExpr */

#ifndef NO_NODE_OracleConnectBy
BEGIN_NODE(OracleConnectBy)
	NODE_SCALAR(bool,no_cycle)
	NODE_NODE(Node,start_with)
	NODE_NODE(Node,connect_by)
	NODE_NODE(List,sortClause)
	NODE_NODE(List,sort_tlist)
END_NODE(OracleConnectBy)
#endif /* NO_NODE_OracleConnectBy */

#endif

#ifndef NO_NODE_InferenceElem
BEGIN_NODE(InferenceElem)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Node,expr)
	NODE_SCALAR(Oid,infercollid)
	NODE_SCALAR(Oid,inferopclass)
END_NODE(InferenceElem)
#endif /* NO_NODE_InferenceElem */

#ifndef NO_NODE_TargetEntry
BEGIN_NODE(TargetEntry)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,expr)
	NODE_SCALAR(AttrNumber,resno)
	NODE_STRING(resname)
	NODE_SCALAR(Index,ressortgroupref)
	NODE_OID(class,resorigtbl)
	NODE_SCALAR(AttrNumber,resorigcol)
	NODE_SCALAR(bool,resjunk)
#ifdef ADB_GRAM_ORA
	NODE_SCALAR(int,as_location)
	NODE_SCALAR(int,expr_loc)
	NODE_SCALAR(int,expr_len)
	NODE_ENUM(NodeTag,expr_type)
#endif
END_NODE(TargetEntry)
#endif /* NO_NODE_TargetEntry */

#ifndef NO_NODE_RangeTblRef
BEGIN_NODE(RangeTblRef)
	NODE_SCALAR(int,rtindex)
END_NODE(RangeTblRef)
#endif /* NO_NODE_RangeTblRef */

#ifndef NO_NODE_JoinExpr
BEGIN_NODE(JoinExpr)
	NODE_ENUM(JoinType,jointype)
	NODE_SCALAR(bool,isNatural)
	NODE_NODE(Node,larg)
	NODE_NODE(Node,rarg)
	NODE_NODE(List,usingClause)
	NODE_NODE(Alias,join_using_alias)
	NODE_NODE(Node,quals)
	NODE_NODE(Alias,alias)
	NODE_SCALAR(int,rtindex)
END_NODE(JoinExpr)
#endif /* NO_NODE_JoinExpr */

#ifndef NO_NODE_FromExpr
BEGIN_NODE(FromExpr)
	NODE_NODE(List,fromlist)
	NODE_NODE(Node,quals)
END_NODE(FromExpr)
#endif /* NO_NODE_FromExpr */

#ifndef NO_NODE_OnConflictExpr
BEGIN_NODE(OnConflictExpr)
	NODE_ENUM(OnConflictAction,action)
	NODE_NODE(List,arbiterElems)
	NODE_NODE(Node,arbiterWhere)
	NODE_SCALAR(Oid,constraint)
	NODE_NODE(List,onConflictSet)
	NODE_NODE(Node,onConflictWhere)
	NODE_SCALAR(int,exclRelIndex)
	NODE_NODE(List,exclRelTlist)
END_NODE(OnConflictExpr)
#endif /* NO_NODE_OnConflictExpr */

#ifndef NO_NODE_IntoClause
BEGIN_NODE(IntoClause)
	NODE_NODE(RangeVar,rel)
	NODE_NODE(List,colNames)
	NODE_STRING(accessMethod)
	NODE_NODE(List,options)
	NODE_ENUM(OnCommitAction,onCommit)
	NODE_STRING(tableSpaceName)
	NODE_NODE(Node,viewQuery)
	NODE_SCALAR(bool,skipData)
#ifdef ADB
	NODE_NODE(PartitionSpec,distributeby)
	NODE_NODE(PGXCSubCluster,subcluster)
#endif
END_NODE(IntoClause)
#endif /* NO_NODE_IntoClause */

#ifdef ADB

#ifndef NO_NODE_PGXCSubCluster
BEGIN_NODE(PGXCSubCluster)
	NODE_ENUM(PGXCSubClusterType,clustertype)
	NODE_SCALAR(int,modulus)
	NODE_SCALAR(int,mod_loc)
	NODE_NODE(List,members)
END_NODE(PGXCSubCluster)
#endif /* NO_NODE_PGXCSubCluster */

#endif

#ifndef NO_NODE_PlannerGlobal
BEGIN_NODE(PlannerGlobal)
	NODE_STRUCT(ParamListInfoData,boundParams)
	NODE_NODE(List,subplans)
	NODE_NODE(List,subroots)
	NODE_BITMAPSET(Bitmapset,rewindPlanIDs)
	NODE_NODE(List,finalrtable)
	NODE_NODE(List,finalrowmarks)
	NODE_NODE(List,resultRelations)
	NODE_NODE(List,relationOids)
	NODE_NODE(List,invalItems)
	NODE_NODE(List,paramExecTypes)
	NODE_SCALAR(Index,lastPHId)
	NODE_SCALAR(Index,lastRowMarkId)
	NODE_SCALAR(int,lastPlanNodeId)
	NODE_SCALAR(bool,transientPlan)
	NODE_SCALAR(bool,dependsOnRole)
	NODE_SCALAR(bool,parallelModeOK)
	NODE_SCALAR(bool,parallelModeNeeded)
	NODE_SCALAR(char,maxParallelHazard)
#ifdef ADB
	NODE_SCALAR(bool,clusterPlanOK)
	NODE_SCALAR(int,usedRemoteAux)
#endif /* ADB */
END_NODE(PlannerGlobal)
#endif /* NO_NODE_PlannerGlobal */

#ifndef NO_NODE_IndexOptInfo
BEGIN_NODE(IndexOptInfo)
	NODE_SCALAR(Oid,indexoid)
	NODE_SCALAR(Oid,reltablespace)
	NODE_NODE(RelOptInfo,rel)
	NODE_SCALAR(BlockNumber,pages)
	NODE_SCALAR(double,tuples)
	NODE_SCALAR(int,tree_height)
	NODE_SCALAR(int,ncolumns)
	NODE_SCALAR(int,nkeycolumns)
	NODE_SCALAR_POINT(int,indexkeys,NODE_ARG_->ncolumns)
	NODE_SCALAR_POINT(Oid,indexcollations,NODE_ARG_->ncolumns)
	NODE_SCALAR_POINT(Oid,opfamily,NODE_ARG_->ncolumns)
	NODE_SCALAR_POINT(Oid,opcintype,NODE_ARG_->ncolumns)
	NODE_SCALAR_POINT(Oid,sortopfamily,NODE_ARG_->ncolumns)
	NODE_SCALAR_POINT(bool,reverse_sort,NODE_ARG_->ncolumns)
	NODE_SCALAR_POINT(bool,nulls_first,NODE_ARG_->ncolumns)
	NODE_BYTEA_ARRAY(bytea,opclassoptions,NODE_ARG_->ncolumns)
	NODE_SCALAR_POINT(bool,canreturn,NODE_ARG_->ncolumns)
	NODE_SCALAR(Oid,relam)
	NODE_NODE(List,indexprs)
	NODE_NODE(List,indpred)
	NODE_NODE(List,indextlist)
	NODE_NODE(List,indrestrictinfo)
	NODE_SCALAR(bool,predOK)
	NODE_SCALAR(bool,unique)
	NODE_SCALAR(bool,immediate)
	NODE_SCALAR(bool,hypothetical)
	NODE_SCALAR(bool,amcanorderbyop)
	NODE_SCALAR(bool,amoptionalkey)
	NODE_SCALAR(bool,amsearcharray)
	NODE_SCALAR(bool,amsearchnulls)
	NODE_SCALAR(bool,amhasgettuple)
	NODE_SCALAR(bool,amhasgetbitmap)
	NODE_SCALAR(bool,amcanparallel)
	NODE_SCALAR(bool,amcanmarkpos)
	NODE_OTHER_POINT(void,amcostestimate)
END_NODE(IndexOptInfo)
#endif /* NO_NODE_IndexOptInfo */

#ifndef NO_NODE_ParamPathInfo
BEGIN_NODE(ParamPathInfo)
	NODE_RELIDS(Relids,ppi_req_outer)
	NODE_SCALAR(double,ppi_rows)
	NODE_NODE(List,ppi_clauses)
END_NODE(ParamPathInfo)
#endif /* NO_NODE_ParamPathInfo */

#ifndef NO_NODE_Path
BEGIN_NODE(Path)
	NODE_ENUM(NodeTag,pathtype)
	NODE_NODE(RelOptInfo,parent)
	NODE_NODE(PathTarget,pathtarget)
	NODE_NODE(ParamPathInfo,param_info)
	NODE_SCALAR(bool,parallel_aware)
	NODE_SCALAR(bool,parallel_safe)
	NODE_SCALAR(int,parallel_workers)
	NODE_SCALAR(double,rows)
	NODE_SCALAR(Cost,startup_cost)
	NODE_SCALAR(Cost,total_cost)
	NODE_NODE(List,pathkeys)
#ifdef ADB
	NODE_STRUCT_LIST(ReduceInfo, reduce_info_list)
	NODE_SCALAR(bool,reduce_is_valid)
#endif
END_NODE(Path)
#endif /* NO_NODE_Path */

#ifndef NO_NODE_IndexPath
BEGIN_NODE(IndexPath)
	NODE_BASE2(Path,path)
	NODE_NODE(IndexOptInfo,indexinfo)
	NODE_NODE(List,indexclauses)
	NODE_NODE(List,indexorderbys)
	NODE_NODE(List,indexorderbycols)
	NODE_ENUM(ScanDirection,indexscandir)
	NODE_SCALAR(Cost,indextotalcost)
	NODE_SCALAR(Selectivity,indexselectivity)
END_NODE(IndexPath)
#endif /* NO_NODE_IndexPath */

#ifndef NO_NODE_BitmapHeapPath
BEGIN_NODE(BitmapHeapPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,bitmapqual)
END_NODE(BitmapHeapPath)
#endif /* NO_NODE_BitmapHeapPath */

#ifndef NO_NODE_BitmapAndPath
BEGIN_NODE(BitmapAndPath)
	NODE_BASE2(Path,path)
	NODE_NODE(List,bitmapquals)
	NODE_SCALAR(Selectivity,bitmapselectivity)
END_NODE(BitmapAndPath)
#endif /* NO_NODE_BitmapAndPath */

#ifndef NO_NODE_BitmapOrPath
BEGIN_NODE(BitmapOrPath)
	NODE_BASE2(Path,path)
	NODE_NODE(List,bitmapquals)
	NODE_SCALAR(Selectivity,bitmapselectivity)
END_NODE(BitmapOrPath)
#endif /* NO_NODE_BitmapOrPath */

#ifndef NO_NODE_TidPath
BEGIN_NODE(TidPath)
	NODE_BASE2(Path,path)
	NODE_NODE(List,tidquals)
END_NODE(TidPath)
#endif /* NO_NODE_TidPath */

#ifndef NO_NODE_TidRangePath
BEGIN_NODE(TidRangePath)
	NODE_BASE2(Path,path)
	NODE_NODE(List,tidrangequals)
END_NODE(TidRangePath)
#endif /* NO_NODE_TidRangePath */

#ifndef NO_NODE_SubqueryScanPath
BEGIN_NODE(SubqueryScanPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
END_NODE(SubqueryScanPath)
#endif /* NO_NODE_SubqueryScanPath */

#ifndef NO_NODE_ForeignPath
BEGIN_NODE(ForeignPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,fdw_outerpath)
	NODE_NODE(List,fdw_private)
END_NODE(ForeignPath)
#endif /* NO_NODE_ForeignPath */

#ifndef NO_NODE_NestPath
NODE_SAME(NestPath, JoinPath)
#endif /* NO_NODE_NestPath */

#ifndef NO_NODE_MergePath
BEGIN_NODE(MergePath)
	NODE_BASE2(JoinPath,jpath)
	NODE_NODE(List,path_mergeclauses)
	NODE_NODE(List,outersortkeys)
	NODE_NODE(List,innersortkeys)
	NODE_SCALAR(bool,skip_mark_restore)
	NODE_SCALAR(bool,materialize_inner)
END_NODE(MergePath)
#endif /* NO_NODE_MergePath */

#ifndef NO_NODE_HashPath
BEGIN_NODE(HashPath)
	NODE_BASE2(JoinPath,jpath)
	NODE_NODE(List,path_hashclauses)
	NODE_SCALAR(int,num_batches)
	NODE_SCALAR(double,inner_rows_total)
END_NODE(HashPath)
#endif /* NO_NODE_HashPath */

#ifndef NO_NODE_AppendPath
BEGIN_NODE(AppendPath)
	NODE_BASE2(Path,path)
	NODE_NODE(List,subpaths)
	NODE_SCALAR(int,first_partial_path)
	NODE_SCALAR(double,limit_tuples)
END_NODE(AppendPath)
#endif /* NO_NODE_AppendPath */

#ifndef NO_NODE_MergeAppendPath
BEGIN_NODE(MergeAppendPath)
	NODE_BASE2(Path,path)
	NODE_NODE(List,subpaths)
	NODE_SCALAR(double,limit_tuples)
END_NODE(MergeAppendPath)
#endif /* NO_NODE_MergeAppendPath */

#ifndef NO_NODE_GroupResultPath
BEGIN_NODE(GroupResultPath)
	NODE_BASE2(Path,path)
	NODE_NODE(List,quals)
#if defined(ADB) || defined(ADB_GRAM_ORA)
	NODE_NODE(Path,subpath)
#endif
END_NODE(GroupResultPath)
#endif /* NO_NODE_GroupResultPath */

#ifndef NO_NODE_MaterialPath
BEGIN_NODE(MaterialPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
END_NODE(MaterialPath)
#endif /* NO_NODE_MaterialPath */

#ifndef NO_NODE_ResultCachePath
BEGIN_NODE(ResultCachePath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(List,hash_operators)
	NODE_NODE(List,param_exprs)
	NODE_SCALAR(bool,singlerow)
	NODE_SCALAR(double,calls)
	NODE_SCALAR(uint32,est_entries)
END_NODE(ResultCachePath)
#endif /* NO_NODE_ResultCachePath */

#ifndef NO_NODE_UniquePath
BEGIN_NODE(UniquePath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_ENUM(UniquePathMethod,umethod)
	NODE_NODE(List,in_operators)
	NODE_NODE(List,uniq_exprs)
END_NODE(UniquePath)
#endif /* NO_NODE_UniquePath */

#ifndef NO_NODE_GatherPath
BEGIN_NODE(GatherPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_SCALAR(bool,single_copy)
	NODE_SCALAR(int,num_workers)
END_NODE(GatherPath)
#endif /* NO_NODE_GatherPath */

#ifndef NO_NODE_GatherMergePath
BEGIN_NODE(GatherMergePath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_SCALAR(int,num_workers)
END_NODE(GatherMergePath)
#endif /* NO_NODE_GatherMergePath */

#ifndef NO_NODE_ProjectionPath
BEGIN_NODE(ProjectionPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_SCALAR(bool,dummypp)
END_NODE(ProjectionPath)
#endif /* NO_NODE_ProjectionPath */

#ifndef NO_NODE_ProjectSetPath
BEGIN_NODE(ProjectSetPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
END_NODE(ProjectSetPath)
#endif /* NO_NODE_ProjectSetPath */

#ifndef NO_NODE_SortPath
BEGIN_NODE(SortPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
END_NODE(SortPath)
#endif /* NO_NODE_SortPath */

#ifndef NO_NODE_IncrementalSortPath
BEGIN_NODE(IncrementalSortPath)
	NODE_BASE2(SortPath,spath)
	NODE_SCALAR(int,nPresortedCols)
END_NODE(IncrementalSortPath)
#endif /* NO_NODE_IncrementalSortPath */

#ifndef NO_NODE_GroupPath
BEGIN_NODE(GroupPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(List,groupClause)
	NODE_NODE(List,qual)
END_NODE(GroupPath)
#endif /* NO_NODE_GroupPath */

#ifndef NO_NODE_UpperUniquePath
BEGIN_NODE(UpperUniquePath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_SCALAR(int,numkeys)
END_NODE(UpperUniquePath)
#endif /* NO_NODE_UpperUniquePath */

#ifndef NO_NODE_AggPath
BEGIN_NODE(AggPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_ENUM(AggStrategy,aggstrategy)
	NODE_ENUM(AggSplit,aggsplit)
	NODE_SCALAR(double,numGroups)
	NODE_SCALAR(uint64,transitionSpace)
	NODE_NODE(List,groupClause)
	NODE_NODE(List,qual)
#ifdef ADB_EXT
	NODE_SCALAR(uint32,num_batches)
#endif
END_NODE(AggPath)
#endif /* NO_NODE_AggPath */

#ifndef NO_NODE_GroupingSetsPath
BEGIN_NODE(GroupingSetsPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_ENUM(AggStrategy,aggstrategy)
	NODE_NODE(List,rollups)
	NODE_NODE(List,qual)
	NODE_SCALAR(uint64,transitionSpace)
END_NODE(GroupingSetsPath)
#endif /* NO_NODE_GroupingSetsPath */

#ifndef NO_NODE_MinMaxAggPath
BEGIN_NODE(MinMaxAggPath)
	NODE_BASE2(Path,path)
	NODE_NODE(List,mmaggregates)
	NODE_NODE(List,quals)
END_NODE(MinMaxAggPath)
#endif /* NO_NODE_MinMaxAggPath */

#ifndef NO_NODE_WindowAggPath
BEGIN_NODE(WindowAggPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(WindowClause,winclause)
END_NODE(WindowAggPath)
#endif /* NO_NODE_WindowAggPath */

#ifndef NO_NODE_SetOpPath
BEGIN_NODE(SetOpPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_ENUM(SetOpCmd,cmd)
	NODE_ENUM(SetOpStrategy,strategy)
	NODE_NODE(List,distinctList)
	NODE_SCALAR(AttrNumber,flagColIdx)
	NODE_SCALAR(int,firstFlag)
	NODE_SCALAR(double,numGroups)
END_NODE(SetOpPath)
#endif /* NO_NODE_SetOpPath */

#ifndef NO_NODE_RecursiveUnionPath
BEGIN_NODE(RecursiveUnionPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,leftpath)
	NODE_NODE(Path,rightpath)
	NODE_NODE(List,distinctList)
	NODE_SCALAR(int,wtParam)
	NODE_SCALAR(double,numGroups)
END_NODE(RecursiveUnionPath)
#endif /* NO_NODE_RecursiveUnionPath */

#ifndef NO_NODE_LockRowsPath
BEGIN_NODE(LockRowsPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(List,rowMarks)
	NODE_SCALAR(int,epqParam)
END_NODE(LockRowsPath)
#endif /* NO_NODE_LockRowsPath */

#ifndef NO_NODE_ModifyTablePath
BEGIN_NODE(ModifyTablePath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_ENUM(CmdType,operation)
	NODE_SCALAR(bool,canSetTag)
	NODE_SCALAR(Index,nominalRelation)
	NODE_SCALAR(Index,rootRelation)
	NODE_SCALAR(bool,partColsUpdated)
	NODE_NODE(List,resultRelations)
	NODE_NODE(List,updateColnosLists)
	NODE_NODE(List,withCheckOptionLists)
	NODE_NODE(List,returningLists)
	NODE_NODE(List,rowMarks)
	NODE_NODE(OnConflictExpr,onconflict)
	NODE_SCALAR(int,epqParam)
#ifdef ADB
	NODE_SCALAR(bool,under_cluster)
#endif
END_NODE(ModifyTablePath)
#endif /* NO_NODE_ModifyTablePath */

#ifndef NO_NODE_LimitPath
BEGIN_NODE(LimitPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(Node,limitOffset)
	NODE_NODE(Node,limitCount)
	NODE_ENUM(LimitOption,limitOption)
END_NODE(LimitPath)
#endif /* NO_NODE_LimitPath */

#ifdef ADB_EXT

#ifndef NO_NODE_BatchSortPath
BEGIN_NODE(BatchSortPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(List,batchkeys)
	NODE_NODE(List,groupClause)
	NODE_SCALAR(uint32,numBatches)
END_NODE(BatchSortPath)
#endif /* NO_NODE_BatchSortPath */

#endif

#ifdef ADB

#ifndef NO_NODE_RemoteQueryPath
BEGIN_NODE(RemoteQueryPath)
	NODE_BASE2(Path,path)
	NODE_NODE(ExecNodes,rqpath_en)
	NODE_NODE(RemoteQueryPath,leftpath)
	NODE_NODE(RemoteQueryPath,rightpath)
	NODE_ENUM(JoinType,jointype)
	NODE_NODE(List,join_restrictlist)
	NODE_SCALAR(bool,rqhas_unshippable_qual)
	NODE_SCALAR(bool,rqhas_temp_rel)
	NODE_SCALAR(bool,rqhas_unshippable_tlist)
END_NODE(RemoteQueryPath)
#endif /* NO_NODE_RemoteQueryPath */

#ifndef NO_NODE_ClusterGatherPath
BEGIN_NODE(ClusterGatherPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(List,rnodes)
END_NODE(ClusterGatherPath)
#endif /* NO_NODE_ClusterGatherPath */

#ifndef NO_NODE_ClusterMergeGatherPath
BEGIN_NODE(ClusterMergeGatherPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(List,rnodes)
END_NODE(ClusterMergeGatherPath)
#endif /* NO_NODE_ClusterMergeGatherPath */

#ifndef NO_NODE_ClusterReducePath
BEGIN_NODE(ClusterReducePath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
	NODE_NODE(List,rnodes)
	NODE_NODE(Expr,special_reduce)
	NODE_SCALAR(Oid,special_node)
END_NODE(ClusterReducePath)
#endif /* NO_NODE_ClusterReducePath */

#ifndef NO_NODE_ReduceScanPath
BEGIN_NODE(ReduceScanPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,reducepath)
	NODE_NODE(List,rescan_clauses)
END_NODE(ReduceScanPath)
#endif /* NO_NODE_ReduceScanPath */

#endif

#if defined(ADB) || defined(ADB_GRAM_ORA)

#ifndef NO_NODE_FilterPath
NODE_SAME(FilterPath, GroupResultPath)
#endif /* NO_NODE_FilterPath */

#endif

#ifdef ADB_GRAM_ORA

#ifndef NO_NODE_ConnectByPath
BEGIN_NODE(ConnectByPath)
	NODE_BASE2(Path,path)
	NODE_NODE(Path,subpath)
END_NODE(ConnectByPath)
#endif /* NO_NODE_ConnectByPath */

#endif

#ifndef NO_NODE_EquivalenceClass
BEGIN_NODE(EquivalenceClass)
	NODE_NODE(List,ec_opfamilies)
	NODE_OID(collation,ec_collation)
	NODE_NODE(List,ec_members)
	NODE_NODE(List,ec_sources)
	NODE_NODE(List,ec_derives)
	NODE_RELIDS(Relids,ec_relids)
	NODE_SCALAR(bool,ec_has_const)
	NODE_SCALAR(bool,ec_has_volatile)
	NODE_SCALAR(bool,ec_below_outer_join)
	NODE_SCALAR(bool,ec_broken)
	NODE_SCALAR(Index,ec_sortref)
	NODE_SCALAR(Index,ec_min_security)
	NODE_SCALAR(Index,ec_max_security)
	NODE_NODE(EquivalenceClass,ec_merged)
END_NODE(EquivalenceClass)
#endif /* NO_NODE_EquivalenceClass */

#ifndef NO_NODE_EquivalenceMember
BEGIN_NODE(EquivalenceMember)
	NODE_NODE(Expr,em_expr)
	NODE_RELIDS(Relids,em_relids)
	NODE_RELIDS(Relids,em_nullable_relids)
	NODE_SCALAR(bool,em_is_const)
	NODE_SCALAR(bool,em_is_child)
	NODE_SCALAR(Oid,em_datatype)
END_NODE(EquivalenceMember)
#endif /* NO_NODE_EquivalenceMember */

#ifndef NO_NODE_PathKey
BEGIN_NODE(PathKey)
	NODE_NODE(EquivalenceClass,pk_eclass)
	NODE_SCALAR(Oid,pk_opfamily)
	NODE_SCALAR(int,pk_strategy)
	NODE_SCALAR(bool,pk_nulls_first)
END_NODE(PathKey)
#endif /* NO_NODE_PathKey */

#ifndef NO_NODE_PathTarget
BEGIN_NODE(PathTarget)
	NODE_NODE(List,exprs)
	NODE_SCALAR_POINT(Index,sortgrouprefs,list_length(NODE_ARG_->exprs))
	NODE_STRUCT_MEB(QualCost,cost)
	NODE_SCALAR(int,width)
	NODE_ENUM(VolatileFunctionStatus,has_volatile_expr)
#ifdef ADB_GRAM_ORA
	NODE_NODE(List,as_loc_list)
	NODE_NODE(List,expr_loc_list)
	NODE_NODE(List,expr_len_list)
	NODE_NODE(List,expr_type_list)
#endif
END_NODE(PathTarget)
#endif /* NO_NODE_PathTarget */

#ifndef NO_NODE_RestrictInfo
BEGIN_NODE(RestrictInfo)
	NODE_NODE(Expr,clause)
	NODE_SCALAR(bool,is_pushed_down)
	NODE_SCALAR(bool,outerjoin_delayed)
	NODE_SCALAR(bool,can_join)
	NODE_SCALAR(bool,pseudoconstant)
	NODE_SCALAR(bool,leakproof)
	NODE_ENUM(VolatileFunctionStatus,has_volatile)
	NODE_SCALAR(Index,security_level)
	NODE_RELIDS(Relids,clause_relids)
	NODE_RELIDS(Relids,required_relids)
	NODE_RELIDS(Relids,outer_relids)
	NODE_RELIDS(Relids,nullable_relids)
	NODE_RELIDS(Relids,left_relids)
	NODE_RELIDS(Relids,right_relids)
	NODE_NODE(Expr,orclause)
	NODE_NODE(EquivalenceClass,parent_ec)
	NODE_STRUCT_MEB(QualCost,eval_cost)
	NODE_SCALAR(Selectivity,norm_selec)
	NODE_SCALAR(Selectivity,outer_selec)
	NODE_NODE(List,mergeopfamilies)
	NODE_NODE(EquivalenceClass,left_ec)
	NODE_NODE(EquivalenceClass,right_ec)
	NODE_NODE(EquivalenceMember,left_em)
	NODE_NODE(EquivalenceMember,right_em)
	NODE_STRUCT_LIST(MergeScanSelCache,scansel_cache)
	NODE_SCALAR(bool,outer_is_left)
	NODE_SCALAR(Oid,hashjoinoperator)
	NODE_SCALAR(Selectivity,left_bucketsize)
	NODE_SCALAR(Selectivity,right_bucketsize)
	NODE_SCALAR(Selectivity,left_mcvfreq)
	NODE_SCALAR(Selectivity,right_mcvfreq)
	NODE_SCALAR(Oid,hasheqoperator)
END_NODE(RestrictInfo)
#endif /* NO_NODE_RestrictInfo */

#ifndef NO_NODE_IndexClause
BEGIN_NODE(IndexClause)
	NODE_NODE(RestrictInfo,rinfo)
	NODE_NODE(List,indexquals)
	NODE_SCALAR(bool,lossy)
	NODE_SCALAR(AttrNumber,indexcol)
	NODE_NODE(List,indexcols)
END_NODE(IndexClause)
#endif /* NO_NODE_IndexClause */

#ifndef NO_NODE_PlaceHolderVar
BEGIN_NODE(PlaceHolderVar)
	NODE_BASE2(Expr,xpr)
	NODE_NODE(Expr,phexpr)
	NODE_RELIDS(Relids,phrels)
	NODE_SCALAR(Index,phid)
	NODE_SCALAR(Index,phlevelsup)
END_NODE(PlaceHolderVar)
#endif /* NO_NODE_PlaceHolderVar */

#ifndef NO_NODE_SpecialJoinInfo
BEGIN_NODE(SpecialJoinInfo)
	NODE_RELIDS(Relids,min_lefthand)
	NODE_RELIDS(Relids,min_righthand)
	NODE_RELIDS(Relids,syn_lefthand)
	NODE_RELIDS(Relids,syn_righthand)
	NODE_ENUM(JoinType,jointype)
	NODE_SCALAR(bool,lhs_strict)
	NODE_SCALAR(bool,delay_upper_joins)
	NODE_SCALAR(bool,semi_can_btree)
	NODE_SCALAR(bool,semi_can_hash)
	NODE_NODE(List,semi_operators)
	NODE_NODE(List,semi_rhs_exprs)
END_NODE(SpecialJoinInfo)
#endif /* NO_NODE_SpecialJoinInfo */

#ifndef NO_NODE_AppendRelInfo
BEGIN_NODE(AppendRelInfo)
	NODE_SCALAR(Index,parent_relid)
	NODE_SCALAR(Index,child_relid)
	NODE_OID(type,parent_reltype)
	NODE_OID(type,child_reltype)
	NODE_NODE(List,translated_vars)
	NODE_SCALAR(int,num_child_cols)
	NODE_SCALAR_POINT(AttrNumber,parent_colnos,NODE_ARG_->num_child_cols)
	NODE_SCALAR(Oid,parent_reloid)
END_NODE(AppendRelInfo)
#endif /* NO_NODE_AppendRelInfo */

#ifndef NO_NODE_RowIdentityVarInfo
BEGIN_NODE(RowIdentityVarInfo)
	NODE_NODE(Var,rowidvar)
	NODE_SCALAR(int32,rowidwidth)
	NODE_STRING(rowidname)
	NODE_RELIDS(Relids,rowidrels)
END_NODE(RowIdentityVarInfo)
#endif /* NO_NODE_RowIdentityVarInfo */

#ifndef NO_NODE_PlaceHolderInfo
BEGIN_NODE(PlaceHolderInfo)
	NODE_SCALAR(Index,phid)
	NODE_NODE(PlaceHolderVar,ph_var)
	NODE_RELIDS(Relids,ph_eval_at)
	NODE_RELIDS(Relids,ph_lateral)
	NODE_RELIDS(Relids,ph_needed)
	NODE_SCALAR(int32,ph_width)
END_NODE(PlaceHolderInfo)
#endif /* NO_NODE_PlaceHolderInfo */

#ifndef NO_NODE_MinMaxAggInfo
BEGIN_NODE(MinMaxAggInfo)
	NODE_OID(proc,aggfnoid)
	NODE_SCALAR(Oid,aggsortop)
	NODE_NODE(Expr,target)
	NODE_NODE(PlannerInfo,subroot)
	NODE_NODE(Path,path)
	NODE_SCALAR(Cost,pathcost)
	NODE_NODE(Param,param)
END_NODE(MinMaxAggInfo)
#endif /* NO_NODE_MinMaxAggInfo */

#ifndef NO_NODE_PlannerParamItem
BEGIN_NODE(PlannerParamItem)
	NODE_NODE(Node,item)
	NODE_SCALAR(int,paramId)
END_NODE(PlannerParamItem)
#endif /* NO_NODE_PlannerParamItem */

#ifndef NO_NODE_RollupData
BEGIN_NODE(RollupData)
	NODE_NODE(List,groupClause)
	NODE_NODE(List,gsets)
	NODE_NODE(List,gsets_data)
	NODE_SCALAR(double,numGroups)
	NODE_SCALAR(bool,hashable)
	NODE_SCALAR(bool,is_hashed)
END_NODE(RollupData)
#endif /* NO_NODE_RollupData */

#ifndef NO_NODE_GroupingSetData
BEGIN_NODE(GroupingSetData)
	NODE_NODE(List,set)
	NODE_SCALAR(double,numGroups)
END_NODE(GroupingSetData)
#endif /* NO_NODE_GroupingSetData */

#ifndef NO_NODE_StatisticExtInfo
BEGIN_NODE(StatisticExtInfo)
	NODE_SCALAR(Oid,statOid)
	NODE_NODE(RelOptInfo,rel)
	NODE_SCALAR(char,kind)
	NODE_BITMAPSET(Bitmapset,keys)
	NODE_NODE(List,exprs)
END_NODE(StatisticExtInfo)
#endif /* NO_NODE_StatisticExtInfo */

#ifndef NO_NODE_ExtensibleNode
BEGIN_NODE(ExtensibleNode)
	NODE_STRING(extnodename)
END_NODE(ExtensibleNode)
#endif /* NO_NODE_ExtensibleNode */

#ifndef NO_NODE_RawStmt
BEGIN_NODE(RawStmt)
	NODE_NODE(Node,stmt)
	NODE_SCALAR(int,stmt_location)
	NODE_SCALAR(int,stmt_len)
END_NODE(RawStmt)
#endif /* NO_NODE_RawStmt */

#ifndef NO_NODE_Query
BEGIN_NODE(Query)
	NODE_ENUM(CmdType,commandType)
	NODE_ENUM(QuerySource,querySource)
	NODE_SCALAR(uint64,queryId)
	NODE_SCALAR(bool,canSetTag)
	NODE_NODE(Node,utilityStmt)
	NODE_SCALAR(int,resultRelation)
	NODE_SCALAR(bool,hasAggs)
	NODE_SCALAR(bool,hasWindowFuncs)
	NODE_SCALAR(bool,hasTargetSRFs)
	NODE_SCALAR(bool,hasSubLinks)
	NODE_SCALAR(bool,hasDistinctOn)
	NODE_SCALAR(bool,hasRecursive)
	NODE_SCALAR(bool,hasModifyingCTE)
	NODE_SCALAR(bool,hasForUpdate)
	NODE_SCALAR(bool,hasRowSecurity)
	NODE_SCALAR(bool,isReturn)
	NODE_NODE(List,cteList)
	NODE_NODE(List,rtable)
	NODE_NODE(FromExpr,jointree)
	NODE_NODE(List,targetList)
	NODE_ENUM(OverridingKind,override)
	NODE_NODE(OnConflictExpr,onConflict)
	NODE_NODE(List,returningList)
	NODE_NODE(List,groupClause)
	NODE_SCALAR(bool,groupDistinct)
	NODE_NODE(List,groupingSets)
	NODE_NODE(Node,havingQual)
	NODE_NODE(List,windowClause)
	NODE_NODE(List,distinctClause)
	NODE_NODE(List,sortClause)
	NODE_NODE(Node,limitOffset)
	NODE_NODE(Node,limitCount)
	NODE_ENUM(LimitOption,limitOption)
	NODE_NODE(List,rowMarks)
	NODE_NODE(Node,setOperations)
	NODE_NODE(List,constraintDeps)
	NODE_NODE(List,withCheckOptions)
	NODE_SCALAR(int,stmt_location)
	NODE_SCALAR(int,stmt_len)
#ifdef ADB
	NODE_STRING(sql_statement)
	NODE_SCALAR(bool,is_local)
	NODE_SCALAR(bool,has_to_save_cmd_id)
	NODE_SCALAR(bool,in_sub_plan)
	NODE_SCALAR(bool,in_explain)
#endif
#ifdef ADB_GRAM_ORA
	NODE_NODE(OracleConnectBy,connect_by)
#endif
END_NODE(Query)
#endif /* NO_NODE_Query */

#ifndef NO_NODE_PlannedStmt
BEGIN_NODE(PlannedStmt)
	NODE_ENUM(CmdType,commandType)
	NODE_SCALAR(uint64,queryId)
	NODE_SCALAR(bool,hasReturning)
	NODE_SCALAR(bool,hasModifyingCTE)
	NODE_SCALAR(bool,canSetTag)
	NODE_SCALAR(bool,transientPlan)
	NODE_SCALAR(bool,dependsOnRole)
	NODE_SCALAR(bool,parallelModeNeeded)
	NODE_SCALAR(int,jitFlags)
	NODE_NODE(Plan,planTree)
	NODE_NODE(List,rtable)
	NODE_NODE(List,resultRelations)
	NODE_NODE(List,appendRelations)
	NODE_NODE(List,subplans)
	NODE_BITMAPSET(Bitmapset,rewindPlanIDs)
	NODE_NODE(List,rowMarks)
	NODE_NODE(List,relationOids)
	NODE_NODE(List,invalItems)
	NODE_NODE(List,paramExecTypes)
	NODE_NODE(Node,utilityStmt)
	NODE_SCALAR(int,stmt_location)
	NODE_SCALAR(int,stmt_len)
END_NODE(PlannedStmt)
#endif /* NO_NODE_PlannedStmt */

#ifndef NO_NODE_InsertStmt
BEGIN_NODE(InsertStmt)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(List,cols)
	NODE_NODE(Node,selectStmt)
	NODE_NODE(OnConflictClause,onConflictClause)
	NODE_NODE(List,returningList)
	NODE_NODE(WithClause,withClause)
	NODE_ENUM(OverridingKind,override)
END_NODE(InsertStmt)
#endif /* NO_NODE_InsertStmt */

#ifndef NO_NODE_DeleteStmt
BEGIN_NODE(DeleteStmt)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(List,usingClause)
	NODE_NODE(Node,whereClause)
	NODE_NODE(List,returningList)
	NODE_NODE(WithClause,withClause)
END_NODE(DeleteStmt)
#endif /* NO_NODE_DeleteStmt */

#ifndef NO_NODE_UpdateStmt
BEGIN_NODE(UpdateStmt)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(List,targetList)
	NODE_NODE(Node,whereClause)
	NODE_NODE(List,fromClause)
	NODE_NODE(List,returningList)
	NODE_NODE(WithClause,withClause)
END_NODE(UpdateStmt)
#endif /* NO_NODE_UpdateStmt */

#ifndef NO_NODE_SelectStmt
BEGIN_NODE(SelectStmt)
	NODE_NODE(List,distinctClause)
	NODE_NODE(IntoClause,intoClause)
	NODE_NODE(List,targetList)
	NODE_NODE(List,fromClause)
	NODE_NODE(Node,whereClause)
	NODE_NODE(List,groupClause)
	NODE_SCALAR(bool,groupDistinct)
	NODE_NODE(Node,havingClause)
	NODE_NODE(List,windowClause)
	NODE_NODE(List,valuesLists)
	NODE_NODE(List,sortClause)
	NODE_NODE(Node,limitOffset)
	NODE_NODE(Node,limitCount)
	NODE_ENUM(LimitOption,limitOption)
	NODE_NODE(List,lockingClause)
	NODE_NODE(WithClause,withClause)
	NODE_ENUM(SetOperation,op)
	NODE_SCALAR(bool,all)
	NODE_NODE(SelectStmt,larg)
	NODE_NODE(SelectStmt,rarg)
#ifdef ADB_GRAM_ORA
	NODE_NODE(OracleConnectBy,ora_connect_by)
#endif
END_NODE(SelectStmt)
#endif /* NO_NODE_SelectStmt */

#ifndef NO_NODE_ReturnStmt
BEGIN_NODE(ReturnStmt)
	NODE_NODE(Node,returnval)
END_NODE(ReturnStmt)
#endif /* NO_NODE_ReturnStmt */

#ifndef NO_NODE_PLAssignStmt
BEGIN_NODE(PLAssignStmt)
	NODE_STRING(name)
	NODE_NODE(List,indirection)
	NODE_SCALAR(int,nnames)
	NODE_NODE(SelectStmt,val)
	NODE_SCALAR(int,location)
END_NODE(PLAssignStmt)
#endif /* NO_NODE_PLAssignStmt */

#ifndef NO_NODE_AlterTableStmt
BEGIN_NODE(AlterTableStmt)
#if defined(ADB_MULTI_GRAM)
	NODE_ENUM(ParseGrammar,grammar)
#endif
	NODE_NODE(RangeVar,relation)
	NODE_NODE(List,cmds)
	NODE_ENUM(ObjectType,objtype)
	NODE_SCALAR(bool,missing_ok)
END_NODE(AlterTableStmt)
#endif /* NO_NODE_AlterTableStmt */

#ifndef NO_NODE_AlterTableCmd
BEGIN_NODE(AlterTableCmd)
	NODE_ENUM(AlterTableType,subtype)
	NODE_STRING(name)
	NODE_SCALAR(int16,num)
	NODE_NODE(RoleSpec,newowner)
	NODE_NODE(Node,def)
	NODE_ENUM(DropBehavior,behavior)
	NODE_SCALAR(bool,missing_ok)
END_NODE(AlterTableCmd)
#endif /* NO_NODE_AlterTableCmd */

#ifndef NO_NODE_AlterDomainStmt
BEGIN_NODE(AlterDomainStmt)
	NODE_SCALAR(char,subtype)
	NODE_NODE(List,typeName)
	NODE_STRING(name)
	NODE_NODE(Node,def)
	NODE_ENUM(DropBehavior,behavior)
	NODE_SCALAR(bool,missing_ok)
END_NODE(AlterDomainStmt)
#endif /* NO_NODE_AlterDomainStmt */

#ifndef NO_NODE_SetOperationStmt
BEGIN_NODE(SetOperationStmt)
	NODE_ENUM(SetOperation,op)
	NODE_SCALAR(bool,all)
	NODE_NODE(Node,larg)
	NODE_NODE(Node,rarg)
	NODE_NODE(List,colTypes)
	NODE_NODE(List,colTypmods)
	NODE_NODE(List,colCollations)
	NODE_NODE(List,groupClauses)
END_NODE(SetOperationStmt)
#endif /* NO_NODE_SetOperationStmt */

#ifndef NO_NODE_GrantStmt
BEGIN_NODE(GrantStmt)
	NODE_SCALAR(bool,is_grant)
	NODE_ENUM(GrantTargetType,targtype)
	NODE_ENUM(ObjectType,objtype)
	NODE_NODE(List,objects)
	NODE_NODE(List,privileges)
	NODE_NODE(List,grantees)
	NODE_SCALAR(bool,grant_option)
	NODE_NODE(RoleSpec,grantor)
	NODE_ENUM(DropBehavior,behavior)
END_NODE(GrantStmt)
#endif /* NO_NODE_GrantStmt */

#ifndef NO_NODE_GrantRoleStmt
BEGIN_NODE(GrantRoleStmt)
	NODE_NODE(List,granted_roles)
	NODE_NODE(List,grantee_roles)
	NODE_SCALAR(bool,is_grant)
	NODE_SCALAR(bool,admin_opt)
	NODE_NODE(RoleSpec,grantor)
	NODE_ENUM(DropBehavior,behavior)
END_NODE(GrantRoleStmt)
#endif /* NO_NODE_GrantRoleStmt */

#ifndef NO_NODE_AlterDefaultPrivilegesStmt
BEGIN_NODE(AlterDefaultPrivilegesStmt)
	NODE_NODE(List,options)
	NODE_NODE(GrantStmt,action)
END_NODE(AlterDefaultPrivilegesStmt)
#endif /* NO_NODE_AlterDefaultPrivilegesStmt */

#ifndef NO_NODE_ClosePortalStmt
BEGIN_NODE(ClosePortalStmt)
	NODE_STRING(portalname)
END_NODE(ClosePortalStmt)
#endif /* NO_NODE_ClosePortalStmt */

#ifndef NO_NODE_ClusterStmt
BEGIN_NODE(ClusterStmt)
	NODE_NODE(RangeVar,relation)
	NODE_STRING(indexname)
	NODE_NODE(List,params)
END_NODE(ClusterStmt)
#endif /* NO_NODE_ClusterStmt */

#ifndef NO_NODE_CopyStmt
BEGIN_NODE(CopyStmt)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(Node,query)
	NODE_NODE(List,attlist)
	NODE_SCALAR(bool,is_from)
	NODE_SCALAR(bool,is_program)
	NODE_STRING(filename)
	NODE_NODE(List,options)
	NODE_NODE(Node,whereClause)
END_NODE(CopyStmt)
#endif /* NO_NODE_CopyStmt */

#ifndef NO_NODE_CreateStmt
BEGIN_NODE(CreateStmt)
#if defined(ADB_MULTI_GRAM)
	NODE_ENUM(ParseGrammar,grammar)
#endif
	NODE_NODE(RangeVar,relation)
	NODE_NODE(List,tableElts)
	NODE_NODE(List,inhRelations)
	NODE_NODE(PartitionBoundSpec,partbound)
	NODE_NODE(PartitionSpec,partspec)
	NODE_NODE(TypeName,ofTypename)
	NODE_NODE(List,constraints)
	NODE_NODE(List,options)
	NODE_ENUM(OnCommitAction,oncommit)
	NODE_STRING(tablespacename)
	NODE_STRING(accessMethod)
	NODE_SCALAR(bool,if_not_exists)
#ifdef ADB
	NODE_SCALAR(bool,auxiliary)
	NODE_NODE(RangeVar,master_relation)
	NODE_SCALAR(AttrNumber,aux_attnum)
	NODE_NODE(PartitionSpec,distributeby)
	NODE_NODE(PGXCSubCluster,subcluster)
#endif
#if defined(ADB_GRAM_ORA) || defined(ADB_GRAM_DB2)
	NODE_NODE(List,child_rels)
#endif
END_NODE(CreateStmt)
#endif /* NO_NODE_CreateStmt */

#ifndef NO_NODE_DefineStmt
BEGIN_NODE(DefineStmt)
	NODE_ENUM(ObjectType,kind)
	NODE_SCALAR(bool,oldstyle)
	NODE_NODE(List,defnames)
	NODE_NODE(List,args)
	NODE_NODE(List,definition)
	NODE_SCALAR(bool,if_not_exists)
	NODE_SCALAR(bool,replace)
END_NODE(DefineStmt)
#endif /* NO_NODE_DefineStmt */

#ifndef NO_NODE_DropStmt
BEGIN_NODE(DropStmt)
	NODE_NODE(List,objects)
	NODE_ENUM(ObjectType,removeType)
	NODE_ENUM(DropBehavior,behavior)
	NODE_SCALAR(bool,missing_ok)
	NODE_SCALAR(bool,concurrent)
#ifdef ADB
	NODE_SCALAR(bool,auxiliary)
#endif
END_NODE(DropStmt)
#endif /* NO_NODE_DropStmt */

#ifndef NO_NODE_TruncateStmt
BEGIN_NODE(TruncateStmt)
	NODE_NODE(List,relations)
	NODE_SCALAR(bool,restart_seqs)
	NODE_ENUM(DropBehavior,behavior)
END_NODE(TruncateStmt)
#endif /* NO_NODE_TruncateStmt */

#ifndef NO_NODE_CommentStmt
BEGIN_NODE(CommentStmt)
	NODE_ENUM(ObjectType,objtype)
	NODE_NODE(Node,object)
	NODE_STRING(comment)
END_NODE(CommentStmt)
#endif /* NO_NODE_CommentStmt */

#ifndef NO_NODE_FetchStmt
BEGIN_NODE(FetchStmt)
	NODE_ENUM(FetchDirection,direction)
	NODE_SCALAR(long,howMany)
	NODE_STRING(portalname)
	NODE_SCALAR(bool,ismove)
END_NODE(FetchStmt)
#endif /* NO_NODE_FetchStmt */

#ifndef NO_NODE_IndexStmt
BEGIN_NODE(IndexStmt)
#if defined(ADB_MULTI_GRAM)
	NODE_ENUM(ParseGrammar,grammar)
#endif
	NODE_STRING(idxname)
	NODE_NODE(RangeVar,relation)
	NODE_STRING(accessMethod)
	NODE_STRING(tableSpace)
	NODE_NODE(List,indexParams)
	NODE_NODE(List,indexIncludingParams)
	NODE_NODE(List,options)
	NODE_NODE(Node,whereClause)
	NODE_NODE(List,excludeOpNames)
	NODE_STRING(idxcomment)
	NODE_SCALAR(Oid,indexOid)
	NODE_SCALAR(Oid,oldNode)
	NODE_SCALAR(SubTransactionId,oldCreateSubid)
	NODE_SCALAR(SubTransactionId,oldFirstRelfilenodeSubid)
	NODE_SCALAR(bool,unique)
	NODE_SCALAR(bool,primary)
	NODE_SCALAR(bool,isconstraint)
	NODE_SCALAR(bool,deferrable)
	NODE_SCALAR(bool,initdeferred)
	NODE_SCALAR(bool,transformed)
	NODE_SCALAR(bool,concurrent)
	NODE_SCALAR(bool,if_not_exists)
	NODE_SCALAR(bool,reset_default_tblspc)
END_NODE(IndexStmt)
#endif /* NO_NODE_IndexStmt */

#ifndef NO_NODE_CreateFunctionStmt
BEGIN_NODE(CreateFunctionStmt)
	NODE_SCALAR(bool,is_procedure)
	NODE_SCALAR(bool,replace)
	NODE_NODE(List,funcname)
	NODE_NODE(List,parameters)
	NODE_NODE(TypeName,returnType)
	NODE_NODE(List,options)
	NODE_NODE(Node,sql_body)
END_NODE(CreateFunctionStmt)
#endif /* NO_NODE_CreateFunctionStmt */

#ifndef NO_NODE_AlterFunctionStmt
BEGIN_NODE(AlterFunctionStmt)
	NODE_ENUM(ObjectType,objtype)
	NODE_NODE(ObjectWithArgs,func)
	NODE_NODE(List,actions)
END_NODE(AlterFunctionStmt)
#endif /* NO_NODE_AlterFunctionStmt */

#ifndef NO_NODE_DoStmt
BEGIN_NODE(DoStmt)
	NODE_NODE(List,args)
END_NODE(DoStmt)
#endif /* NO_NODE_DoStmt */

#ifndef NO_NODE_RenameStmt
BEGIN_NODE(RenameStmt)
	NODE_ENUM(ObjectType,renameType)
	NODE_ENUM(ObjectType,relationType)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(Node,object)
	NODE_STRING(subname)
	NODE_STRING(newname)
	NODE_ENUM(DropBehavior,behavior)
	NODE_SCALAR(bool,missing_ok)
END_NODE(RenameStmt)
#endif /* NO_NODE_RenameStmt */

#ifndef NO_NODE_RuleStmt
BEGIN_NODE(RuleStmt)
	NODE_NODE(RangeVar,relation)
	NODE_STRING(rulename)
	NODE_NODE(Node,whereClause)
	NODE_ENUM(CmdType,event)
	NODE_SCALAR(bool,instead)
	NODE_NODE(List,actions)
	NODE_SCALAR(bool,replace)
END_NODE(RuleStmt)
#endif /* NO_NODE_RuleStmt */

#ifndef NO_NODE_NotifyStmt
BEGIN_NODE(NotifyStmt)
	NODE_STRING(conditionname)
	NODE_STRING(payload)
END_NODE(NotifyStmt)
#endif /* NO_NODE_NotifyStmt */

#ifndef NO_NODE_ListenStmt
BEGIN_NODE(ListenStmt)
	NODE_STRING(conditionname)
END_NODE(ListenStmt)
#endif /* NO_NODE_ListenStmt */

#ifndef NO_NODE_UnlistenStmt
BEGIN_NODE(UnlistenStmt)
	NODE_STRING(conditionname)
END_NODE(UnlistenStmt)
#endif /* NO_NODE_UnlistenStmt */

#ifndef NO_NODE_TransactionStmt
BEGIN_NODE(TransactionStmt)
#if defined(ADB)
	NODE_SCALAR(bool,missing_ok)
#endif
	NODE_ENUM(TransactionStmtKind,kind)
	NODE_NODE(List,options)
	NODE_STRING(savepoint_name)
	NODE_STRING(gid)
	NODE_SCALAR(bool,chain)
END_NODE(TransactionStmt)
#endif /* NO_NODE_TransactionStmt */

#ifndef NO_NODE_ViewStmt
BEGIN_NODE(ViewStmt)
#if defined(ADB_MULTI_GRAM)
	NODE_ENUM(ParseGrammar,grammar)
#endif
	NODE_NODE(RangeVar,view)
	NODE_NODE(List,aliases)
	NODE_NODE(Node,query)
	NODE_SCALAR(bool,replace)
	NODE_NODE(List,options)
	NODE_ENUM(ViewCheckOption,withCheckOption)
END_NODE(ViewStmt)
#endif /* NO_NODE_ViewStmt */

#ifndef NO_NODE_LoadStmt
BEGIN_NODE(LoadStmt)
	NODE_STRING(filename)
END_NODE(LoadStmt)
#endif /* NO_NODE_LoadStmt */

#ifndef NO_NODE_CreateDomainStmt
BEGIN_NODE(CreateDomainStmt)
	NODE_NODE(List,domainname)
	NODE_NODE(TypeName,typeName)
	NODE_NODE(CollateClause,collClause)
	NODE_NODE(List,constraints)
END_NODE(CreateDomainStmt)
#endif /* NO_NODE_CreateDomainStmt */

#ifndef NO_NODE_CreatedbStmt
BEGIN_NODE(CreatedbStmt)
	NODE_STRING(dbname)
	NODE_NODE(List,options)
END_NODE(CreatedbStmt)
#endif /* NO_NODE_CreatedbStmt */

#ifndef NO_NODE_DropdbStmt
BEGIN_NODE(DropdbStmt)
	NODE_STRING(dbname)
	NODE_SCALAR(bool,missing_ok)
	NODE_NODE(List,options)
END_NODE(DropdbStmt)
#endif /* NO_NODE_DropdbStmt */

#ifndef NO_NODE_VacuumStmt
BEGIN_NODE(VacuumStmt)
	NODE_NODE(List,options)
	NODE_NODE(List,rels)
	NODE_SCALAR(bool,is_vacuumcmd)
END_NODE(VacuumStmt)
#endif /* NO_NODE_VacuumStmt */

#ifndef NO_NODE_ExplainStmt
BEGIN_NODE(ExplainStmt)
	NODE_NODE(Node,query)
	NODE_NODE(List,options)
END_NODE(ExplainStmt)
#endif /* NO_NODE_ExplainStmt */

#ifndef NO_NODE_CreateTableAsStmt
BEGIN_NODE(CreateTableAsStmt)
#if defined(ADB_MULTI_GRAM)
	NODE_ENUM(ParseGrammar,grammar)
#endif
	NODE_NODE(Node,query)
	NODE_NODE(IntoClause,into)
	NODE_ENUM(ObjectType,objtype)
	NODE_SCALAR(bool,is_select_into)
	NODE_SCALAR(bool,if_not_exists)
END_NODE(CreateTableAsStmt)
#endif /* NO_NODE_CreateTableAsStmt */

#ifndef NO_NODE_CreateSeqStmt
BEGIN_NODE(CreateSeqStmt)
	NODE_NODE(RangeVar,sequence)
	NODE_NODE(List,options)
	NODE_SCALAR(Oid,ownerId)
	NODE_SCALAR(bool,for_identity)
	NODE_SCALAR(bool,if_not_exists)
#ifdef ADB
	NODE_SCALAR(bool,is_serial)
#endif
END_NODE(CreateSeqStmt)
#endif /* NO_NODE_CreateSeqStmt */

#ifndef NO_NODE_AlterSeqStmt
BEGIN_NODE(AlterSeqStmt)
	NODE_NODE(RangeVar,sequence)
	NODE_NODE(List,options)
	NODE_SCALAR(bool,for_identity)
	NODE_SCALAR(bool,missing_ok)
#ifdef ADB
	NODE_SCALAR(bool,is_serial)
#endif
END_NODE(AlterSeqStmt)
#endif /* NO_NODE_AlterSeqStmt */

#ifndef NO_NODE_VariableSetStmt
BEGIN_NODE(VariableSetStmt)
	NODE_ENUM(VariableSetKind,kind)
	NODE_STRING(name)
	NODE_NODE(List,args)
	NODE_SCALAR(bool,is_local)
END_NODE(VariableSetStmt)
#endif /* NO_NODE_VariableSetStmt */

#ifndef NO_NODE_VariableShowStmt
BEGIN_NODE(VariableShowStmt)
	NODE_STRING(name)
END_NODE(VariableShowStmt)
#endif /* NO_NODE_VariableShowStmt */

#ifndef NO_NODE_DiscardStmt
BEGIN_NODE(DiscardStmt)
	NODE_ENUM(DiscardMode,target)
END_NODE(DiscardStmt)
#endif /* NO_NODE_DiscardStmt */

#ifndef NO_NODE_CreateTrigStmt
BEGIN_NODE(CreateTrigStmt)
	NODE_SCALAR(bool,replace)
	NODE_SCALAR(bool,isconstraint)
	NODE_STRING(trigname)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(List,funcname)
	NODE_NODE(List,args)
	NODE_SCALAR(bool,row)
	NODE_SCALAR(int16,timing)
	NODE_SCALAR(int16,events)
	NODE_NODE(List,columns)
	NODE_NODE(Node,whenClause)
	NODE_NODE(List,transitionRels)
	NODE_SCALAR(bool,deferrable)
	NODE_SCALAR(bool,initdeferred)
	NODE_NODE(RangeVar,constrrel)
END_NODE(CreateTrigStmt)
#endif /* NO_NODE_CreateTrigStmt */

#ifndef NO_NODE_CreatePLangStmt
BEGIN_NODE(CreatePLangStmt)
	NODE_SCALAR(bool,replace)
	NODE_STRING(plname)
	NODE_NODE(List,plhandler)
	NODE_NODE(List,plinline)
	NODE_NODE(List,plvalidator)
	NODE_SCALAR(bool,pltrusted)
END_NODE(CreatePLangStmt)
#endif /* NO_NODE_CreatePLangStmt */

#ifndef NO_NODE_CreateRoleStmt
BEGIN_NODE(CreateRoleStmt)
	NODE_ENUM(RoleStmtType,stmt_type)
	NODE_STRING(role)
	NODE_NODE(List,options)
END_NODE(CreateRoleStmt)
#endif /* NO_NODE_CreateRoleStmt */

#ifndef NO_NODE_AlterRoleStmt
BEGIN_NODE(AlterRoleStmt)
	NODE_NODE(RoleSpec,role)
	NODE_NODE(List,options)
	NODE_SCALAR(int,action)
END_NODE(AlterRoleStmt)
#endif /* NO_NODE_AlterRoleStmt */

#ifndef NO_NODE_DropRoleStmt
BEGIN_NODE(DropRoleStmt)
	NODE_NODE(List,roles)
	NODE_SCALAR(bool,missing_ok)
END_NODE(DropRoleStmt)
#endif /* NO_NODE_DropRoleStmt */

#ifndef NO_NODE_LockStmt
BEGIN_NODE(LockStmt)
	NODE_NODE(List,relations)
	NODE_SCALAR(int,mode)
	NODE_SCALAR(bool,nowait)
END_NODE(LockStmt)
#endif /* NO_NODE_LockStmt */

#ifndef NO_NODE_ConstraintsSetStmt
BEGIN_NODE(ConstraintsSetStmt)
	NODE_NODE(List,constraints)
	NODE_SCALAR(bool,deferred)
END_NODE(ConstraintsSetStmt)
#endif /* NO_NODE_ConstraintsSetStmt */

#ifndef NO_NODE_ReindexStmt
BEGIN_NODE(ReindexStmt)
	NODE_ENUM(ReindexObjectType,kind)
	NODE_NODE(RangeVar,relation)
	NODE_STRING(name)
	NODE_NODE(List,params)
END_NODE(ReindexStmt)
#endif /* NO_NODE_ReindexStmt */

#ifndef NO_NODE_CheckPointStmt
BEGIN_NODE(CheckPointStmt)
END_NODE(CheckPointStmt)
#endif /* NO_NODE_CheckPointStmt */

#ifndef NO_NODE_CreateSchemaStmt
BEGIN_NODE(CreateSchemaStmt)
	NODE_STRING(schemaname)
	NODE_NODE(RoleSpec,authrole)
	NODE_NODE(List,schemaElts)
	NODE_SCALAR(bool,if_not_exists)
END_NODE(CreateSchemaStmt)
#endif /* NO_NODE_CreateSchemaStmt */

#ifndef NO_NODE_AlterDatabaseStmt
BEGIN_NODE(AlterDatabaseStmt)
	NODE_STRING(dbname)
	NODE_NODE(List,options)
END_NODE(AlterDatabaseStmt)
#endif /* NO_NODE_AlterDatabaseStmt */

#ifndef NO_NODE_AlterDatabaseSetStmt
BEGIN_NODE(AlterDatabaseSetStmt)
	NODE_STRING(dbname)
	NODE_NODE(VariableSetStmt,setstmt)
END_NODE(AlterDatabaseSetStmt)
#endif /* NO_NODE_AlterDatabaseSetStmt */

#ifndef NO_NODE_AlterRoleSetStmt
BEGIN_NODE(AlterRoleSetStmt)
	NODE_NODE(RoleSpec,role)
	NODE_STRING(database)
	NODE_NODE(VariableSetStmt,setstmt)
END_NODE(AlterRoleSetStmt)
#endif /* NO_NODE_AlterRoleSetStmt */

#ifndef NO_NODE_CreateConversionStmt
BEGIN_NODE(CreateConversionStmt)
	NODE_NODE(List,conversion_name)
	NODE_STRING(for_encoding_name)
	NODE_STRING(to_encoding_name)
	NODE_NODE(List,func_name)
	NODE_SCALAR(bool,def)
END_NODE(CreateConversionStmt)
#endif /* NO_NODE_CreateConversionStmt */

#ifndef NO_NODE_CreateCastStmt
BEGIN_NODE(CreateCastStmt)
	NODE_NODE(TypeName,sourcetype)
	NODE_NODE(TypeName,targettype)
	NODE_NODE(ObjectWithArgs,func)
	NODE_ENUM(CoercionContext,context)
	NODE_SCALAR(bool,inout)
END_NODE(CreateCastStmt)
#endif /* NO_NODE_CreateCastStmt */

#ifndef NO_NODE_CreateOpClassStmt
BEGIN_NODE(CreateOpClassStmt)
	NODE_NODE(List,opclassname)
	NODE_NODE(List,opfamilyname)
	NODE_STRING(amname)
	NODE_NODE(TypeName,datatype)
	NODE_NODE(List,items)
	NODE_SCALAR(bool,isDefault)
END_NODE(CreateOpClassStmt)
#endif /* NO_NODE_CreateOpClassStmt */

#ifndef NO_NODE_CreateOpFamilyStmt
BEGIN_NODE(CreateOpFamilyStmt)
	NODE_NODE(List,opfamilyname)
	NODE_STRING(amname)
END_NODE(CreateOpFamilyStmt)
#endif /* NO_NODE_CreateOpFamilyStmt */

#ifndef NO_NODE_AlterOpFamilyStmt
BEGIN_NODE(AlterOpFamilyStmt)
	NODE_NODE(List,opfamilyname)
	NODE_STRING(amname)
	NODE_SCALAR(bool,isDrop)
	NODE_NODE(List,items)
END_NODE(AlterOpFamilyStmt)
#endif /* NO_NODE_AlterOpFamilyStmt */

#ifndef NO_NODE_PrepareStmt
BEGIN_NODE(PrepareStmt)
	NODE_STRING(name)
	NODE_NODE(List,argtypes)
	NODE_NODE(Node,query)
END_NODE(PrepareStmt)
#endif /* NO_NODE_PrepareStmt */

#ifndef NO_NODE_ExecuteStmt
BEGIN_NODE(ExecuteStmt)
	NODE_STRING(name)
	NODE_NODE(List,params)
END_NODE(ExecuteStmt)
#endif /* NO_NODE_ExecuteStmt */

#ifndef NO_NODE_DeallocateStmt
BEGIN_NODE(DeallocateStmt)
	NODE_STRING(name)
END_NODE(DeallocateStmt)
#endif /* NO_NODE_DeallocateStmt */

#ifndef NO_NODE_DeclareCursorStmt
BEGIN_NODE(DeclareCursorStmt)
	NODE_STRING(portalname)
	NODE_SCALAR(int,options)
	NODE_NODE(Node,query)
END_NODE(DeclareCursorStmt)
#endif /* NO_NODE_DeclareCursorStmt */

#ifndef NO_NODE_CreateTableSpaceStmt
BEGIN_NODE(CreateTableSpaceStmt)
	NODE_STRING(tablespacename)
	NODE_NODE(RoleSpec,owner)
	NODE_STRING(location)
	NODE_NODE(List,options)
END_NODE(CreateTableSpaceStmt)
#endif /* NO_NODE_CreateTableSpaceStmt */

#ifndef NO_NODE_DropTableSpaceStmt
BEGIN_NODE(DropTableSpaceStmt)
	NODE_STRING(tablespacename)
	NODE_SCALAR(bool,missing_ok)
END_NODE(DropTableSpaceStmt)
#endif /* NO_NODE_DropTableSpaceStmt */

#ifndef NO_NODE_AlterObjectDependsStmt
BEGIN_NODE(AlterObjectDependsStmt)
	NODE_ENUM(ObjectType,objectType)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(Node,object)
	NODE_NODE(Value,extname)
	NODE_SCALAR(bool,remove)
END_NODE(AlterObjectDependsStmt)
#endif /* NO_NODE_AlterObjectDependsStmt */

#ifndef NO_NODE_AlterObjectSchemaStmt
BEGIN_NODE(AlterObjectSchemaStmt)
	NODE_ENUM(ObjectType,objectType)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(Node,object)
	NODE_STRING(newschema)
	NODE_SCALAR(bool,missing_ok)
END_NODE(AlterObjectSchemaStmt)
#endif /* NO_NODE_AlterObjectSchemaStmt */

#ifndef NO_NODE_AlterOwnerStmt
BEGIN_NODE(AlterOwnerStmt)
	NODE_ENUM(ObjectType,objectType)
	NODE_NODE(RangeVar,relation)
	NODE_NODE(Node,object)
	NODE_NODE(RoleSpec,newowner)
END_NODE(AlterOwnerStmt)
#endif /* NO_NODE_AlterOwnerStmt */

#ifndef NO_NODE_AlterOperatorStmt
BEGIN_NODE(AlterOperatorStmt)
	NODE_NODE(ObjectWithArgs,opername)
	NODE_NODE(List,options)
END_NODE(AlterOperatorStmt)
#endif /* NO_NODE_AlterOperatorStmt */

#ifndef NO_NODE_AlterTypeStmt
BEGIN_NODE(AlterTypeStmt)
	NODE_NODE(List,typeName)
	NODE_NODE(List,options)
END_NODE(AlterTypeStmt)
#endif /* NO_NODE_AlterTypeStmt */

#ifndef NO_NODE_DropOwnedStmt
BEGIN_NODE(DropOwnedStmt)
	NODE_NODE(List,roles)
	NODE_ENUM(DropBehavior,behavior)
END_NODE(DropOwnedStmt)
#endif /* NO_NODE_DropOwnedStmt */

#ifndef NO_NODE_ReassignOwnedStmt
BEGIN_NODE(ReassignOwnedStmt)
	NODE_NODE(List,roles)
	NODE_NODE(RoleSpec,newrole)
END_NODE(ReassignOwnedStmt)
#endif /* NO_NODE_ReassignOwnedStmt */

#ifndef NO_NODE_CompositeTypeStmt
BEGIN_NODE(CompositeTypeStmt)
	NODE_NODE(RangeVar,typevar)
	NODE_NODE(List,coldeflist)
END_NODE(CompositeTypeStmt)
#endif /* NO_NODE_CompositeTypeStmt */

#ifndef NO_NODE_CreateEnumStmt
BEGIN_NODE(CreateEnumStmt)
	NODE_NODE(List,typeName)
	NODE_NODE(List,vals)
END_NODE(CreateEnumStmt)
#endif /* NO_NODE_CreateEnumStmt */

#ifndef NO_NODE_CreateRangeStmt
BEGIN_NODE(CreateRangeStmt)
	NODE_NODE(List,typeName)
	NODE_NODE(List,params)
END_NODE(CreateRangeStmt)
#endif /* NO_NODE_CreateRangeStmt */

#ifndef NO_NODE_AlterEnumStmt
BEGIN_NODE(AlterEnumStmt)
	NODE_NODE(List,typeName)
	NODE_STRING(oldVal)
	NODE_STRING(newVal)
	NODE_STRING(newValNeighbor)
	NODE_SCALAR(bool,newValIsAfter)
	NODE_SCALAR(bool,skipIfNewValExists)
END_NODE(AlterEnumStmt)
#endif /* NO_NODE_AlterEnumStmt */

#ifndef NO_NODE_AlterTSDictionaryStmt
BEGIN_NODE(AlterTSDictionaryStmt)
	NODE_NODE(List,dictname)
	NODE_NODE(List,options)
END_NODE(AlterTSDictionaryStmt)
#endif /* NO_NODE_AlterTSDictionaryStmt */

#ifndef NO_NODE_AlterTSConfigurationStmt
BEGIN_NODE(AlterTSConfigurationStmt)
	NODE_ENUM(AlterTSConfigType,kind)
	NODE_NODE(List,cfgname)
	NODE_NODE(List,tokentype)
	NODE_NODE(List,dicts)
	NODE_SCALAR(bool,override)
	NODE_SCALAR(bool,replace)
	NODE_SCALAR(bool,missing_ok)
END_NODE(AlterTSConfigurationStmt)
#endif /* NO_NODE_AlterTSConfigurationStmt */

#ifndef NO_NODE_CreateFdwStmt
BEGIN_NODE(CreateFdwStmt)
	NODE_STRING(fdwname)
	NODE_NODE(List,func_options)
	NODE_NODE(List,options)
END_NODE(CreateFdwStmt)
#endif /* NO_NODE_CreateFdwStmt */

#ifndef NO_NODE_AlterFdwStmt
BEGIN_NODE(AlterFdwStmt)
	NODE_STRING(fdwname)
	NODE_NODE(List,func_options)
	NODE_NODE(List,options)
END_NODE(AlterFdwStmt)
#endif /* NO_NODE_AlterFdwStmt */

#ifndef NO_NODE_CreateForeignServerStmt
BEGIN_NODE(CreateForeignServerStmt)
	NODE_STRING(servername)
	NODE_STRING(servertype)
	NODE_STRING(version)
	NODE_STRING(fdwname)
	NODE_SCALAR(bool,if_not_exists)
	NODE_NODE(List,options)
END_NODE(CreateForeignServerStmt)
#endif /* NO_NODE_CreateForeignServerStmt */

#ifndef NO_NODE_AlterForeignServerStmt
BEGIN_NODE(AlterForeignServerStmt)
	NODE_STRING(servername)
	NODE_STRING(version)
	NODE_NODE(List,options)
	NODE_SCALAR(bool,has_version)
END_NODE(AlterForeignServerStmt)
#endif /* NO_NODE_AlterForeignServerStmt */

#ifndef NO_NODE_CreateUserMappingStmt
BEGIN_NODE(CreateUserMappingStmt)
	NODE_NODE(RoleSpec,user)
	NODE_STRING(servername)
	NODE_SCALAR(bool,if_not_exists)
	NODE_NODE(List,options)
END_NODE(CreateUserMappingStmt)
#endif /* NO_NODE_CreateUserMappingStmt */

#ifndef NO_NODE_AlterUserMappingStmt
BEGIN_NODE(AlterUserMappingStmt)
	NODE_NODE(RoleSpec,user)
	NODE_STRING(servername)
	NODE_NODE(List,options)
END_NODE(AlterUserMappingStmt)
#endif /* NO_NODE_AlterUserMappingStmt */

#ifndef NO_NODE_DropUserMappingStmt
BEGIN_NODE(DropUserMappingStmt)
	NODE_NODE(RoleSpec,user)
	NODE_STRING(servername)
	NODE_SCALAR(bool,missing_ok)
END_NODE(DropUserMappingStmt)
#endif /* NO_NODE_DropUserMappingStmt */

#ifdef ADB

#ifndef NO_NODE_ExecDirectStmt
BEGIN_NODE(ExecDirectStmt)
	NODE_NODE(List,node_names)
	NODE_STRING(query)
END_NODE(ExecDirectStmt)
#endif /* NO_NODE_ExecDirectStmt */

#ifndef NO_NODE_CleanConnStmt
BEGIN_NODE(CleanConnStmt)
	NODE_NODE(List,nodes)
	NODE_STRING(dbname)
	NODE_STRING(username)
	NODE_SCALAR(bool,is_coord)
	NODE_SCALAR(bool,is_force)
END_NODE(CleanConnStmt)
#endif /* NO_NODE_CleanConnStmt */

#ifndef NO_NODE_FinishActiveBackendStmt
BEGIN_NODE(FinishActiveBackendStmt)
	NODE_NODE(List,remote_list)
	NODE_NODE(List,options)
END_NODE(FinishActiveBackendStmt)
#endif /* NO_NODE_FinishActiveBackendStmt */

#endif

#ifndef NO_NODE_AlterTableSpaceOptionsStmt
BEGIN_NODE(AlterTableSpaceOptionsStmt)
	NODE_STRING(tablespacename)
	NODE_NODE(List,options)
	NODE_SCALAR(bool,isReset)
END_NODE(AlterTableSpaceOptionsStmt)
#endif /* NO_NODE_AlterTableSpaceOptionsStmt */

#ifndef NO_NODE_AlterTableMoveAllStmt
BEGIN_NODE(AlterTableMoveAllStmt)
	NODE_STRING(orig_tablespacename)
	NODE_ENUM(ObjectType,objtype)
	NODE_NODE(List,roles)
	NODE_STRING(new_tablespacename)
	NODE_SCALAR(bool,nowait)
END_NODE(AlterTableMoveAllStmt)
#endif /* NO_NODE_AlterTableMoveAllStmt */

#ifndef NO_NODE_SecLabelStmt
BEGIN_NODE(SecLabelStmt)
	NODE_ENUM(ObjectType,objtype)
	NODE_NODE(Node,object)
	NODE_STRING(provider)
	NODE_STRING(label)
END_NODE(SecLabelStmt)
#endif /* NO_NODE_SecLabelStmt */

#ifndef NO_NODE_CreateForeignTableStmt
BEGIN_NODE(CreateForeignTableStmt)
	NODE_BASE2(CreateStmt,base)
	NODE_STRING(servername)
	NODE_NODE(List,options)
END_NODE(CreateForeignTableStmt)
#endif /* NO_NODE_CreateForeignTableStmt */

#ifndef NO_NODE_ImportForeignSchemaStmt
BEGIN_NODE(ImportForeignSchemaStmt)
	NODE_STRING(server_name)
	NODE_STRING(remote_schema)
	NODE_STRING(local_schema)
	NODE_ENUM(ImportForeignSchemaType,list_type)
	NODE_NODE(List,table_list)
	NODE_NODE(List,options)
END_NODE(ImportForeignSchemaStmt)
#endif /* NO_NODE_ImportForeignSchemaStmt */

#ifndef NO_NODE_CreateExtensionStmt
BEGIN_NODE(CreateExtensionStmt)
	NODE_STRING(extname)
	NODE_SCALAR(bool,if_not_exists)
	NODE_NODE(List,options)
END_NODE(CreateExtensionStmt)
#endif /* NO_NODE_CreateExtensionStmt */

#ifndef NO_NODE_AlterExtensionStmt
BEGIN_NODE(AlterExtensionStmt)
	NODE_STRING(extname)
	NODE_NODE(List,options)
END_NODE(AlterExtensionStmt)
#endif /* NO_NODE_AlterExtensionStmt */

#ifndef NO_NODE_AlterExtensionContentsStmt
BEGIN_NODE(AlterExtensionContentsStmt)
	NODE_STRING(extname)
	NODE_SCALAR(int,action)
	NODE_ENUM(ObjectType,objtype)
	NODE_NODE(Node,object)
END_NODE(AlterExtensionContentsStmt)
#endif /* NO_NODE_AlterExtensionContentsStmt */

#ifndef NO_NODE_CreateEventTrigStmt
BEGIN_NODE(CreateEventTrigStmt)
	NODE_STRING(trigname)
	NODE_STRING(eventname)
	NODE_NODE(List,whenclause)
	NODE_NODE(List,funcname)
END_NODE(CreateEventTrigStmt)
#endif /* NO_NODE_CreateEventTrigStmt */

#ifndef NO_NODE_AlterEventTrigStmt
BEGIN_NODE(AlterEventTrigStmt)
	NODE_STRING(trigname)
	NODE_SCALAR(char,tgenabled)
END_NODE(AlterEventTrigStmt)
#endif /* NO_NODE_AlterEventTrigStmt */

#ifndef NO_NODE_RefreshMatViewStmt
BEGIN_NODE(RefreshMatViewStmt)
	NODE_SCALAR(bool,concurrent)
	NODE_SCALAR(bool,skipData)
	NODE_NODE(RangeVar,relation)
END_NODE(RefreshMatViewStmt)
#endif /* NO_NODE_RefreshMatViewStmt */

#ifndef NO_NODE_ReplicaIdentityStmt
BEGIN_NODE(ReplicaIdentityStmt)
	NODE_SCALAR(char,identity_type)
	NODE_STRING(name)
END_NODE(ReplicaIdentityStmt)
#endif /* NO_NODE_ReplicaIdentityStmt */

#ifndef NO_NODE_AlterSystemStmt
BEGIN_NODE(AlterSystemStmt)
	NODE_NODE(VariableSetStmt,setstmt)
END_NODE(AlterSystemStmt)
#endif /* NO_NODE_AlterSystemStmt */

#ifndef NO_NODE_CreatePolicyStmt
BEGIN_NODE(CreatePolicyStmt)
	NODE_STRING(policy_name)
	NODE_NODE(RangeVar,table)
	NODE_STRING(cmd_name)
	NODE_SCALAR(bool,permissive)
	NODE_NODE(List,roles)
	NODE_NODE(Node,qual)
	NODE_NODE(Node,with_check)
END_NODE(CreatePolicyStmt)
#endif /* NO_NODE_CreatePolicyStmt */

#ifndef NO_NODE_AlterPolicyStmt
BEGIN_NODE(AlterPolicyStmt)
	NODE_STRING(policy_name)
	NODE_NODE(RangeVar,table)
	NODE_NODE(List,roles)
	NODE_NODE(Node,qual)
	NODE_NODE(Node,with_check)
END_NODE(AlterPolicyStmt)
#endif /* NO_NODE_AlterPolicyStmt */

#ifndef NO_NODE_CreateTransformStmt
BEGIN_NODE(CreateTransformStmt)
	NODE_SCALAR(bool,replace)
	NODE_NODE(TypeName,type_name)
	NODE_STRING(lang)
	NODE_NODE(ObjectWithArgs,fromsql)
	NODE_NODE(ObjectWithArgs,tosql)
END_NODE(CreateTransformStmt)
#endif /* NO_NODE_CreateTransformStmt */

#ifndef NO_NODE_CreateAmStmt
BEGIN_NODE(CreateAmStmt)
	NODE_STRING(amname)
	NODE_NODE(List,handler_name)
	NODE_SCALAR(char,amtype)
END_NODE(CreateAmStmt)
#endif /* NO_NODE_CreateAmStmt */

#ifndef NO_NODE_CreatePublicationStmt
BEGIN_NODE(CreatePublicationStmt)
	NODE_STRING(pubname)
	NODE_NODE(List,options)
	NODE_NODE(List,tables)
	NODE_SCALAR(bool,for_all_tables)
END_NODE(CreatePublicationStmt)
#endif /* NO_NODE_CreatePublicationStmt */

#ifndef NO_NODE_AlterPublicationStmt
BEGIN_NODE(AlterPublicationStmt)
	NODE_STRING(pubname)
	NODE_NODE(List,options)
	NODE_NODE(List,tables)
	NODE_SCALAR(bool,for_all_tables)
	NODE_ENUM(DefElemAction,tableAction)
END_NODE(AlterPublicationStmt)
#endif /* NO_NODE_AlterPublicationStmt */

#ifndef NO_NODE_CreateSubscriptionStmt
BEGIN_NODE(CreateSubscriptionStmt)
	NODE_STRING(subname)
	NODE_STRING(conninfo)
	NODE_NODE(List,publication)
	NODE_NODE(List,options)
END_NODE(CreateSubscriptionStmt)
#endif /* NO_NODE_CreateSubscriptionStmt */

#ifndef NO_NODE_AlterSubscriptionStmt
BEGIN_NODE(AlterSubscriptionStmt)
	NODE_ENUM(AlterSubscriptionType,kind)
	NODE_STRING(subname)
	NODE_STRING(conninfo)
	NODE_NODE(List,publication)
	NODE_NODE(List,options)
END_NODE(AlterSubscriptionStmt)
#endif /* NO_NODE_AlterSubscriptionStmt */

#ifndef NO_NODE_DropSubscriptionStmt
BEGIN_NODE(DropSubscriptionStmt)
	NODE_STRING(subname)
	NODE_SCALAR(bool,missing_ok)
	NODE_ENUM(DropBehavior,behavior)
END_NODE(DropSubscriptionStmt)
#endif /* NO_NODE_DropSubscriptionStmt */

#ifndef NO_NODE_CreateStatsStmt
BEGIN_NODE(CreateStatsStmt)
	NODE_NODE(List,defnames)
	NODE_NODE(List,stat_types)
	NODE_NODE(List,exprs)
	NODE_NODE(List,relations)
	NODE_STRING(stxcomment)
	NODE_SCALAR(bool,if_not_exists)
	NODE_SCALAR(bool,transformed)
END_NODE(CreateStatsStmt)
#endif /* NO_NODE_CreateStatsStmt */

#ifndef NO_NODE_AlterCollationStmt
BEGIN_NODE(AlterCollationStmt)
	NODE_NODE(List,collname)
END_NODE(AlterCollationStmt)
#endif /* NO_NODE_AlterCollationStmt */

#ifndef NO_NODE_CallStmt
BEGIN_NODE(CallStmt)
	NODE_NODE(FuncCall,funccall)
	NODE_NODE(FuncExpr,funcexpr)
END_NODE(CallStmt)
#endif /* NO_NODE_CallStmt */

#ifndef NO_NODE_AlterStatsStmt
BEGIN_NODE(AlterStatsStmt)
	NODE_NODE(List,defnames)
	NODE_SCALAR(int,stxstattarget)
	NODE_SCALAR(bool,missing_ok)
END_NODE(AlterStatsStmt)
#endif /* NO_NODE_AlterStatsStmt */

#ifdef ADB_GRAM_ORA

#ifndef NO_NODE_CreateOracleConvertStmt
BEGIN_NODE(CreateOracleConvertStmt)
	NODE_SCALAR(char,cvtkind)
	NODE_STRING(cvtname)
	NODE_NODE(List,cvtfrom)
	NODE_NODE(List,cvtto)
	NODE_SCALAR(bool,replace)
	NODE_SCALAR(int,location)
END_NODE(CreateOracleConvertStmt)
#endif /* NO_NODE_CreateOracleConvertStmt */

#ifndef NO_NODE_CreateOracleCastStmt
BEGIN_NODE(CreateOracleCastStmt)
	NODE_NODE(TypeName,source_type)
	NODE_NODE(TypeName,target_type)
	NODE_NODE(ObjectWithArgs,func)
	NODE_NODE(ObjectWithArgs,trunc_func)
	NODE_SCALAR(int,coerce_context)
	NODE_SCALAR(bool,replace)
END_NODE(CreateOracleCastStmt)
#endif /* NO_NODE_CreateOracleCastStmt */

#endif

#ifdef ADB

#ifndef NO_NODE_BarrierStmt
BEGIN_NODE(BarrierStmt)
	NODE_STRING(id)
END_NODE(BarrierStmt)
#endif /* NO_NODE_BarrierStmt */

#endif

#ifndef NO_NODE_A_Expr
BEGIN_NODE(A_Expr)
	NODE_ENUM(A_Expr_Kind,kind)
	NODE_NODE(List,name)
	NODE_NODE(Node,lexpr)
	NODE_NODE(Node,rexpr)
	NODE_SCALAR(int,location)
#ifdef ADB_GRAM_ORA
	NODE_SCALAR(bool,is_decode)
#endif
END_NODE(A_Expr)
#endif /* NO_NODE_A_Expr */

#ifndef NO_NODE_ColumnRef
BEGIN_NODE(ColumnRef)
	NODE_NODE(List,fields)
	NODE_SCALAR(int,location)
END_NODE(ColumnRef)
#endif /* NO_NODE_ColumnRef */

#ifdef ADB_GRAM_ORA

#ifndef NO_NODE_ColumnRefJoin
BEGIN_NODE(ColumnRefJoin)
	NODE_LOCATION(int,location)	/* location for "(+)" */
	NODE_NODE(ColumnRef,column)
END_NODE(ColumnRefJoin)
#endif /* NO_NODE_ColumnRefJoin */

#ifndef NO_NODE_PriorExpr
BEGIN_NODE(PriorExpr)
	NODE_SCALAR(int,location)
	NODE_NODE(Node,expr)
END_NODE(PriorExpr)
#endif /* NO_NODE_PriorExpr */

#ifndef NO_NODE_PackageStmt
BEGIN_NODE(PackageStmt)
	NODE_ENUM(PackageAction,action)
END_NODE(PackageStmt)
#endif /* NO_NODE_PackageStmt */

#endif

#ifdef ADB_EXT

#ifndef NO_NODE_KeepClause
BEGIN_NODE(KeepClause)
	NODE_SCALAR(bool,rank_first)
	NODE_NODE(List,keep_order)
	NODE_SCALAR(int,location)
END_NODE(KeepClause)
#endif /* NO_NODE_KeepClause */

#endif

#ifndef NO_NODE_ParamRef
BEGIN_NODE(ParamRef)
	NODE_SCALAR(int,number)
	NODE_SCALAR(int,location)
END_NODE(ParamRef)
#endif /* NO_NODE_ParamRef */

#ifndef NO_NODE_A_Const
BEGIN_NODE(A_Const)
	NODE_NODE_MEB(Value,val)
	NODE_SCALAR(int,location)
END_NODE(A_Const)
#endif /* NO_NODE_A_Const */

#ifndef NO_NODE_FuncCall
BEGIN_NODE(FuncCall)
	NODE_NODE(List,funcname)
	NODE_NODE(List,args)
	NODE_NODE(List,agg_order)
	NODE_NODE(Node,agg_filter)
	NODE_NODE(WindowDef,over)
	NODE_SCALAR(bool,agg_within_group)
	NODE_SCALAR(bool,agg_star)
	NODE_SCALAR(bool,agg_distinct)
	NODE_SCALAR(bool,func_variadic)
	NODE_ENUM(CoercionForm,funcformat)
#ifdef ADB_EXT
	NODE_NODE(KeepClause,agg_keep)
#endif
	NODE_SCALAR(int,location)
END_NODE(FuncCall)
#endif /* NO_NODE_FuncCall */

#ifndef NO_NODE_A_Star
BEGIN_NODE(A_Star)
END_NODE(A_Star)
#endif /* NO_NODE_A_Star */

#ifndef NO_NODE_A_Indices
BEGIN_NODE(A_Indices)
	NODE_SCALAR(bool,is_slice)
	NODE_NODE(Node,lidx)
	NODE_NODE(Node,uidx)
END_NODE(A_Indices)
#endif /* NO_NODE_A_Indices */

#ifndef NO_NODE_A_Indirection
BEGIN_NODE(A_Indirection)
	NODE_NODE(Node,arg)
	NODE_NODE(List,indirection)
END_NODE(A_Indirection)
#endif /* NO_NODE_A_Indirection */

#ifndef NO_NODE_A_ArrayExpr
BEGIN_NODE(A_ArrayExpr)
	NODE_NODE(List,elements)
	NODE_SCALAR(int,location)
END_NODE(A_ArrayExpr)
#endif /* NO_NODE_A_ArrayExpr */

#ifndef NO_NODE_ResTarget
BEGIN_NODE(ResTarget)
	NODE_STRING(name)
	NODE_NODE(List,indirection)
	NODE_NODE(Node,val)
	NODE_SCALAR(int,location)
#ifdef ADB_GRAM_ORA
	NODE_SCALAR(int,as_location)
	NODE_SCALAR(int,expr_len)
#endif
END_NODE(ResTarget)
#endif /* NO_NODE_ResTarget */

#ifndef NO_NODE_MultiAssignRef
BEGIN_NODE(MultiAssignRef)
	NODE_NODE(Node,source)
	NODE_SCALAR(int,colno)
	NODE_SCALAR(int,ncolumns)
END_NODE(MultiAssignRef)
#endif /* NO_NODE_MultiAssignRef */

#ifndef NO_NODE_TypeCast
BEGIN_NODE(TypeCast)
	NODE_NODE(Node,arg)
	NODE_NODE(TypeName,typeName)
	NODE_SCALAR(int,location)
END_NODE(TypeCast)
#endif /* NO_NODE_TypeCast */

#ifndef NO_NODE_CollateClause
BEGIN_NODE(CollateClause)
	NODE_NODE(Node,arg)
	NODE_NODE(List,collname)
	NODE_SCALAR(int,location)
END_NODE(CollateClause)
#endif /* NO_NODE_CollateClause */

#ifndef NO_NODE_SortBy
BEGIN_NODE(SortBy)
	NODE_NODE(Node,node)
	NODE_ENUM(SortByDir,sortby_dir)
	NODE_ENUM(SortByNulls,sortby_nulls)
	NODE_NODE(List,useOp)
	NODE_SCALAR(int,location)
END_NODE(SortBy)
#endif /* NO_NODE_SortBy */

#ifndef NO_NODE_WindowDef
BEGIN_NODE(WindowDef)
	NODE_STRING(name)
	NODE_STRING(refname)
	NODE_NODE(List,partitionClause)
	NODE_NODE(List,orderClause)
	NODE_SCALAR(int,frameOptions)
	NODE_NODE(Node,startOffset)
	NODE_NODE(Node,endOffset)
	NODE_SCALAR(int,location)
END_NODE(WindowDef)
#endif /* NO_NODE_WindowDef */

#ifndef NO_NODE_RangeSubselect
BEGIN_NODE(RangeSubselect)
	NODE_SCALAR(bool,lateral)
	NODE_NODE(Node,subquery)
	NODE_NODE(Alias,alias)
END_NODE(RangeSubselect)
#endif /* NO_NODE_RangeSubselect */

#ifndef NO_NODE_RangeFunction
BEGIN_NODE(RangeFunction)
	NODE_SCALAR(bool,lateral)
	NODE_SCALAR(bool,ordinality)
	NODE_SCALAR(bool,is_rowsfrom)
	NODE_NODE(List,functions)
	NODE_NODE(Alias,alias)
	NODE_NODE(List,coldeflist)
END_NODE(RangeFunction)
#endif /* NO_NODE_RangeFunction */

#ifndef NO_NODE_RangeTableSample
BEGIN_NODE(RangeTableSample)
	NODE_NODE(Node,relation)
	NODE_NODE(List,method)
	NODE_NODE(List,args)
	NODE_NODE(Node,repeatable)
	NODE_SCALAR(int,location)
END_NODE(RangeTableSample)
#endif /* NO_NODE_RangeTableSample */

#ifndef NO_NODE_RangeTableFunc
BEGIN_NODE(RangeTableFunc)
	NODE_SCALAR(bool,lateral)
	NODE_NODE(Node,docexpr)
	NODE_NODE(Node,rowexpr)
	NODE_NODE(List,namespaces)
	NODE_NODE(List,columns)
	NODE_NODE(Alias,alias)
	NODE_SCALAR(int,location)
END_NODE(RangeTableFunc)
#endif /* NO_NODE_RangeTableFunc */

#ifndef NO_NODE_RangeTableFuncCol
BEGIN_NODE(RangeTableFuncCol)
	NODE_STRING(colname)
	NODE_NODE(TypeName,typeName)
	NODE_SCALAR(bool,for_ordinality)
	NODE_SCALAR(bool,is_not_null)
	NODE_NODE(Node,colexpr)
	NODE_NODE(Node,coldefexpr)
	NODE_SCALAR(int,location)
END_NODE(RangeTableFuncCol)
#endif /* NO_NODE_RangeTableFuncCol */

#ifndef NO_NODE_TypeName
BEGIN_NODE(TypeName)
	NODE_NODE(List,names)
	NODE_OID(type,typeOid)
	NODE_SCALAR(bool,setof)
	NODE_SCALAR(bool,pct_type)
	NODE_NODE(List,typmods)
	NODE_SCALAR(int32,typemod)
	NODE_NODE(List,arrayBounds)
	NODE_SCALAR(int,location)
END_NODE(TypeName)
#endif /* NO_NODE_TypeName */

#ifndef NO_NODE_ColumnDef
BEGIN_NODE(ColumnDef)
	NODE_STRING(colname)
	NODE_NODE(TypeName,typeName)
	NODE_STRING(compression)
	NODE_SCALAR(int,inhcount)
	NODE_SCALAR(bool,is_local)
	NODE_SCALAR(bool,is_not_null)
	NODE_SCALAR(bool,is_from_type)
	NODE_SCALAR(char,storage)
	NODE_NODE(Node,raw_default)
	NODE_NODE(Node,cooked_default)
	NODE_SCALAR(char,identity)
	NODE_NODE(RangeVar,identitySequence)
	NODE_SCALAR(char,generated)
	NODE_NODE(CollateClause,collClause)
	NODE_OID(collation,collOid)
	NODE_NODE(List,constraints)
	NODE_NODE(List,fdwoptions)
	NODE_SCALAR(int,location)
END_NODE(ColumnDef)
#endif /* NO_NODE_ColumnDef */

#ifndef NO_NODE_IndexElem
BEGIN_NODE(IndexElem)
	NODE_STRING(name)
	NODE_NODE(Node,expr)
	NODE_STRING(indexcolname)
	NODE_NODE(List,collation)
	NODE_NODE(List,opclass)
	NODE_NODE(List,opclassopts)
	NODE_ENUM(SortByDir,ordering)
	NODE_ENUM(SortByNulls,nulls_ordering)
END_NODE(IndexElem)
#endif /* NO_NODE_IndexElem */

#ifndef NO_NODE_StatsElem
BEGIN_NODE(StatsElem)
	NODE_STRING(name)
	NODE_NODE(Node,expr)
END_NODE(StatsElem)
#endif /* NO_NODE_StatsElem */

#ifndef NO_NODE_Constraint
BEGIN_NODE(Constraint)
	NODE_ENUM(ConstrType,contype)
	NODE_STRING(conname)
	NODE_SCALAR(bool,deferrable)
	NODE_SCALAR(bool,initdeferred)
	NODE_SCALAR(int,location)
	NODE_SCALAR(bool,is_no_inherit)
	NODE_NODE(Node,raw_expr)
	NODE_STRING(cooked_expr)
	NODE_SCALAR(char,generated_when)
	NODE_NODE(List,keys)
	NODE_NODE(List,including)
	NODE_NODE(List,exclusions)
	NODE_NODE(List,options)
	NODE_STRING(indexname)
	NODE_STRING(indexspace)
	NODE_SCALAR(bool,reset_default_tblspc)
	NODE_STRING(access_method)
	NODE_NODE(Node,where_clause)
	NODE_NODE(RangeVar,pktable)
	NODE_NODE(List,fk_attrs)
	NODE_NODE(List,pk_attrs)
	NODE_SCALAR(char,fk_matchtype)
	NODE_SCALAR(char,fk_upd_action)
	NODE_SCALAR(char,fk_del_action)
	NODE_NODE(List,old_conpfeqop)
	NODE_SCALAR(Oid,old_pktable_oid)
	NODE_SCALAR(bool,skip_validation)
	NODE_SCALAR(bool,initially_valid)
END_NODE(Constraint)
#endif /* NO_NODE_Constraint */

#ifndef NO_NODE_DefElem
BEGIN_NODE(DefElem)
	NODE_STRING(defnamespace)
	NODE_STRING(defname)
	NODE_NODE(Node,arg)
	NODE_ENUM(DefElemAction,defaction)
	NODE_SCALAR(int,location)
END_NODE(DefElem)
#endif /* NO_NODE_DefElem */

#ifndef NO_NODE_RangeTblEntry
BEGIN_NODE(RangeTblEntry)
	NODE_ENUM(RTEKind,rtekind)
#ifdef ADB
	NODE_STRING(relname)
#endif
	NODE_OID(class, relid)
	NODE_SCALAR(char,relkind)
	NODE_SCALAR(int,rellockmode)
	NODE_NODE(TableSampleClause,tablesample)
	NODE_NODE(Query,subquery)
	NODE_SCALAR(bool,security_barrier)
	NODE_ENUM(JoinType,jointype)
	NODE_SCALAR(int,joinmergedcols)
	NODE_NODE(List,joinaliasvars)
	NODE_NODE(List,joinleftcols)
	NODE_NODE(List,joinrightcols)
	NODE_NODE(Alias,join_using_alias)
	NODE_NODE(List,functions)
	NODE_SCALAR(bool,funcordinality)
	NODE_NODE(TableFunc,tablefunc)
	NODE_NODE(List,values_lists)
	NODE_STRING(ctename)
	NODE_SCALAR(Index,ctelevelsup)
	NODE_SCALAR(bool,self_reference)
	NODE_NODE(List,coltypes)
	NODE_NODE(List,coltypmods)
	NODE_NODE(List,colcollations)
	NODE_STRING(enrname)
	NODE_SCALAR(double,enrtuples)
#ifdef ADB
	NODE_SCALAR(int,param_new)
	NODE_SCALAR(int,param_old)
	NODE_BITMAPSET(Bitmapset,mt_result)
	NODE_BITMAPSET(Bitmapset,defaultCols)
	NODE_NODE(List,execNodes)
	NODE_SCALAR(double,rows)
#endif
	NODE_NODE(Alias,alias)
	NODE_NODE(Alias,eref)
	NODE_SCALAR(bool,lateral)
	NODE_SCALAR(bool,inh)
	NODE_SCALAR(bool,inFromCl)
	NODE_SCALAR(AclMode,requiredPerms)
	NODE_OID(authid,checkAsUser)
	NODE_BITMAPSET(Bitmapset,selectedCols)
	NODE_BITMAPSET(Bitmapset,insertedCols)
	NODE_BITMAPSET(Bitmapset,updatedCols)
	NODE_BITMAPSET(Bitmapset,extraUpdatedCols)
	NODE_NODE(List,securityQuals)
END_NODE(RangeTblEntry)
#endif /* NO_NODE_RangeTblEntry */

#ifndef NO_NODE_RangeTblFunction
BEGIN_NODE(RangeTblFunction)
	NODE_NODE(Node,funcexpr)
	NODE_SCALAR(int,funccolcount)
	NODE_NODE(List,funccolnames)
	NODE_NODE(List,funccoltypes)
	NODE_NODE(List,funccoltypmods)
	NODE_NODE(List,funccolcollations)
	NODE_BITMAPSET(Bitmapset,funcparams)
END_NODE(RangeTblFunction)
#endif /* NO_NODE_RangeTblFunction */

#ifndef NO_NODE_TableSampleClause
BEGIN_NODE(TableSampleClause)
	NODE_SCALAR(Oid,tsmhandler)
	NODE_NODE(List,args)
	NODE_NODE(Expr,repeatable)
END_NODE(TableSampleClause)
#endif /* NO_NODE_TableSampleClause */

#ifndef NO_NODE_WithCheckOption
BEGIN_NODE(WithCheckOption)
	NODE_ENUM(WCOKind,kind)
	NODE_STRING(relname)
	NODE_STRING(polname)
	NODE_NODE(Node,qual)
	NODE_SCALAR(bool,cascaded)
END_NODE(WithCheckOption)
#endif /* NO_NODE_WithCheckOption */

#ifndef NO_NODE_SortGroupClause
BEGIN_NODE(SortGroupClause)
	NODE_SCALAR(Index,tleSortGroupRef)
	NODE_OID(operator,eqop)
	NODE_OID(operator,sortop)
	NODE_SCALAR(bool,nulls_first)
	NODE_SCALAR(bool,hashable)
END_NODE(SortGroupClause)
#endif /* NO_NODE_SortGroupClause */

#ifndef NO_NODE_GroupingSet
BEGIN_NODE(GroupingSet)
	NODE_ENUM(GroupingSetKind,kind)
	NODE_NODE(List,content)
	NODE_SCALAR(int,location)
END_NODE(GroupingSet)
#endif /* NO_NODE_GroupingSet */

#ifndef NO_NODE_WindowClause
BEGIN_NODE(WindowClause)
	NODE_STRING(name)
	NODE_STRING(refname)
	NODE_NODE(List,partitionClause)
	NODE_NODE(List,orderClause)
	NODE_SCALAR(int,frameOptions)
	NODE_NODE(Node,startOffset)
	NODE_NODE(Node,endOffset)
	NODE_SCALAR(Oid,startInRangeFunc)
	NODE_SCALAR(Oid,endInRangeFunc)
	NODE_SCALAR(Oid,inRangeColl)
	NODE_SCALAR(bool,inRangeAsc)
	NODE_SCALAR(bool,inRangeNullsFirst)
	NODE_SCALAR(Index,winref)
	NODE_SCALAR(bool,copiedOrder)
END_NODE(WindowClause)
#endif /* NO_NODE_WindowClause */

#ifndef NO_NODE_ObjectWithArgs
BEGIN_NODE(ObjectWithArgs)
	NODE_NODE(List,objname)
	NODE_NODE(List,objargs)
	NODE_SCALAR(bool,args_unspecified)
END_NODE(ObjectWithArgs)
#endif /* NO_NODE_ObjectWithArgs */

#ifndef NO_NODE_AccessPriv
BEGIN_NODE(AccessPriv)
	NODE_STRING(priv_name)
	NODE_NODE(List,cols)
END_NODE(AccessPriv)
#endif /* NO_NODE_AccessPriv */

#ifndef NO_NODE_CreateOpClassItem
BEGIN_NODE(CreateOpClassItem)
	NODE_SCALAR(int,itemtype)
	NODE_NODE(ObjectWithArgs,name)
	NODE_SCALAR(int,number)
	NODE_NODE(List,order_family)
	NODE_NODE(List,class_args)
	NODE_NODE(TypeName,storedtype)
END_NODE(CreateOpClassItem)
#endif /* NO_NODE_CreateOpClassItem */

#ifndef NO_NODE_TableLikeClause
BEGIN_NODE(TableLikeClause)
	NODE_NODE(RangeVar,relation)
	NODE_SCALAR(bits32,options)
	NODE_SCALAR(Oid,relationOid)
END_NODE(TableLikeClause)
#endif /* NO_NODE_TableLikeClause */

#ifndef NO_NODE_FunctionParameter
BEGIN_NODE(FunctionParameter)
	NODE_STRING(name)
	NODE_NODE(TypeName,argType)
	NODE_ENUM(FunctionParameterMode,mode)
	NODE_NODE(Node,defexpr)
END_NODE(FunctionParameter)
#endif /* NO_NODE_FunctionParameter */

#ifndef NO_NODE_LockingClause
BEGIN_NODE(LockingClause)
	NODE_NODE(List,lockedRels)
	NODE_ENUM(LockClauseStrength,strength)
	NODE_ENUM(LockWaitPolicy,waitPolicy)
END_NODE(LockingClause)
#endif /* NO_NODE_LockingClause */

#ifndef NO_NODE_RowMarkClause
BEGIN_NODE(RowMarkClause)
	NODE_SCALAR(Index,rti)
	NODE_ENUM(LockClauseStrength,strength)
	NODE_ENUM(LockWaitPolicy,waitPolicy)
	NODE_SCALAR(bool,pushedDown)
END_NODE(RowMarkClause)
#endif /* NO_NODE_RowMarkClause */

#ifndef NO_NODE_XmlSerialize
BEGIN_NODE(XmlSerialize)
	NODE_ENUM(XmlOptionType,xmloption)
	NODE_NODE(Node,expr)
	NODE_NODE(TypeName,typeName)
	NODE_SCALAR(int,location)
END_NODE(XmlSerialize)
#endif /* NO_NODE_XmlSerialize */

#ifndef NO_NODE_WithClause
BEGIN_NODE(WithClause)
	NODE_NODE(List,ctes)
	NODE_SCALAR(bool,recursive)
	NODE_SCALAR(int,location)
END_NODE(WithClause)
#endif /* NO_NODE_WithClause */

#ifndef NO_NODE_InferClause
BEGIN_NODE(InferClause)
	NODE_NODE(List,indexElems)
	NODE_NODE(Node,whereClause)
	NODE_STRING(conname)
	NODE_SCALAR(int,location)
END_NODE(InferClause)
#endif /* NO_NODE_InferClause */

#ifndef NO_NODE_OnConflictClause
BEGIN_NODE(OnConflictClause)
	NODE_ENUM(OnConflictAction,action)
	NODE_NODE(InferClause,infer)
	NODE_NODE(List,targetList)
	NODE_NODE(Node,whereClause)
	NODE_SCALAR(int,location)
END_NODE(OnConflictClause)
#endif /* NO_NODE_OnConflictClause */

#ifndef NO_NODE_CTESearchClause
BEGIN_NODE(CTESearchClause)
	NODE_NODE(List,search_col_list)
	NODE_SCALAR(bool,search_breadth_first)
	NODE_STRING(search_seq_column)
	NODE_SCALAR(int,location)
END_NODE(CTESearchClause)
#endif /* NO_NODE_CTESearchClause */

#ifndef NO_NODE_CTECycleClause
BEGIN_NODE(CTECycleClause)
	NODE_NODE(List,cycle_col_list)
	NODE_STRING(cycle_mark_column)
	NODE_NODE(Node,cycle_mark_value)
	NODE_NODE(Node,cycle_mark_default)
	NODE_STRING(cycle_path_column)
	NODE_SCALAR(int,location)
	NODE_SCALAR(Oid,cycle_mark_type)
	NODE_SCALAR(int,cycle_mark_typmod)
	NODE_SCALAR(Oid,cycle_mark_collation)
	NODE_SCALAR(Oid,cycle_mark_neop)
END_NODE(CTECycleClause)
#endif /* NO_NODE_CTECycleClause */

#ifndef NO_NODE_CommonTableExpr
BEGIN_NODE(CommonTableExpr)
	NODE_STRING(ctename)
	NODE_NODE(List,aliascolnames)
	NODE_ENUM(CTEMaterialize,ctematerialized)
	NODE_NODE(Node,ctequery)
	NODE_NODE(CTESearchClause,search_clause)
	NODE_NODE(CTECycleClause,cycle_clause)
	NODE_SCALAR(int,location)
	NODE_SCALAR(bool,cterecursive)
	NODE_SCALAR(int,cterefcount)
	NODE_NODE(List,ctecolnames)
	NODE_NODE(List,ctecoltypes)
	NODE_NODE(List,ctecoltypmods)
	NODE_NODE(List,ctecolcollations)
END_NODE(CommonTableExpr)
#endif /* NO_NODE_CommonTableExpr */

#ifndef NO_NODE_RoleSpec
BEGIN_NODE(RoleSpec)
	NODE_ENUM(RoleSpecType,roletype)
	NODE_STRING(rolename)
	NODE_SCALAR(int,location)
END_NODE(RoleSpec)
#endif /* NO_NODE_RoleSpec */

#ifndef NO_NODE_TriggerTransition
BEGIN_NODE(TriggerTransition)
	NODE_STRING(name)
	NODE_SCALAR(bool,isNew)
	NODE_SCALAR(bool,isTable)
END_NODE(TriggerTransition)
#endif /* NO_NODE_TriggerTransition */

#ifndef NO_NODE_PartitionElem
BEGIN_NODE(PartitionElem)
	NODE_STRING(name)
	NODE_NODE(Node,expr)
	NODE_NODE(List,collation)
	NODE_NODE(List,opclass)
	NODE_SCALAR(int,location)
END_NODE(PartitionElem)
#endif /* NO_NODE_PartitionElem */

#ifndef NO_NODE_PartitionSpec
BEGIN_NODE(PartitionSpec)
	NODE_STRING(strategy)
	NODE_NODE(List,partParams)
	NODE_SCALAR(int,location)
END_NODE(PartitionSpec)
#endif /* NO_NODE_PartitionSpec */

#ifndef NO_NODE_PartitionBoundSpec
BEGIN_NODE(PartitionBoundSpec)
	NODE_SCALAR(char,strategy)
	NODE_SCALAR(bool,is_default)
	NODE_SCALAR(int,modulus)
	NODE_SCALAR(int,remainder)
	NODE_NODE(List,listdatums)
	NODE_NODE(List,lowerdatums)
	NODE_NODE(List,upperdatums)
	NODE_SCALAR(int,location)
END_NODE(PartitionBoundSpec)
#endif /* NO_NODE_PartitionBoundSpec */

#ifndef NO_NODE_PartitionRangeDatum
BEGIN_NODE(PartitionRangeDatum)
	NODE_ENUM(PartitionRangeDatumKind,kind)
	NODE_NODE(Node,value)
	NODE_SCALAR(int,location)
END_NODE(PartitionRangeDatum)
#endif /* NO_NODE_PartitionRangeDatum */

#ifndef NO_NODE_PartitionCmd
BEGIN_NODE(PartitionCmd)
	NODE_NODE(RangeVar,name)
	NODE_NODE(PartitionBoundSpec,bound)
	NODE_SCALAR(bool,concurrent)
END_NODE(PartitionCmd)
#endif /* NO_NODE_PartitionCmd */

#ifndef NO_NODE_VacuumRelation
BEGIN_NODE(VacuumRelation)
	NODE_NODE(RangeVar,relation)
	NODE_SCALAR(Oid,oid)
	NODE_NODE(List,va_cols)
END_NODE(VacuumRelation)
#endif /* NO_NODE_VacuumRelation */

#ifndef NO_NODE_IdentifySystemCmd
BEGIN_NODE(IdentifySystemCmd)
END_NODE(IdentifySystemCmd)
#endif /* NO_NODE_IdentifySystemCmd */

#ifndef NO_NODE_BaseBackupCmd
BEGIN_NODE(BaseBackupCmd)
	NODE_NODE(List,options)
END_NODE(BaseBackupCmd)
#endif /* NO_NODE_BaseBackupCmd */

#ifndef NO_NODE_CreateReplicationSlotCmd
BEGIN_NODE(CreateReplicationSlotCmd)
	NODE_STRING(slotname)
	NODE_ENUM(ReplicationKind,kind)
	NODE_STRING(plugin)
	NODE_SCALAR(bool,temporary)
	NODE_SCALAR(bool,two_phase)
	NODE_NODE(List,options)
END_NODE(CreateReplicationSlotCmd)
#endif /* NO_NODE_CreateReplicationSlotCmd */

#ifndef NO_NODE_DropReplicationSlotCmd
BEGIN_NODE(DropReplicationSlotCmd)
	NODE_STRING(slotname)
	NODE_SCALAR(bool,wait)
END_NODE(DropReplicationSlotCmd)
#endif /* NO_NODE_DropReplicationSlotCmd */

#ifndef NO_NODE_SQLCmd
BEGIN_NODE(SQLCmd)
END_NODE(SQLCmd)
#endif /* NO_NODE_SQLCmd */

#ifndef NO_NODE_EventTriggerData
BEGIN_NODE(EventTriggerData)
	NODE_STRING(event)
	NODE_NODE(Node,parsetree)
	NODE_ENUM(CommandTag,tag)
END_NODE(EventTriggerData)
#endif /* NO_NODE_EventTriggerData */

#ifndef NO_NODE_InlineCodeBlock
BEGIN_NODE(InlineCodeBlock)
	NODE_STRING(source_text)
	NODE_SCALAR(Oid,langOid)
	NODE_SCALAR(bool,langIsTrusted)
	NODE_SCALAR(bool,atomic)
END_NODE(InlineCodeBlock)
#endif /* NO_NODE_InlineCodeBlock */

#ifndef NO_NODE_CallContext
BEGIN_NODE(CallContext)
	NODE_SCALAR(bool,atomic)
END_NODE(CallContext)
#endif /* NO_NODE_CallContext */

#ifndef NO_NODE_SupportRequestSimplify
BEGIN_NODE(SupportRequestSimplify)
	NODE_NODE(PlannerInfo,root)
	NODE_NODE(FuncExpr,fcall)
END_NODE(SupportRequestSimplify)
#endif /* NO_NODE_SupportRequestSimplify */

#ifndef NO_NODE_SupportRequestSelectivity
BEGIN_NODE(SupportRequestSelectivity)
	NODE_NODE(PlannerInfo,root)
	NODE_SCALAR(Oid,funcid)
	NODE_NODE(List,args)
	NODE_SCALAR(Oid,inputcollid)
	NODE_SCALAR(bool,is_join)
	NODE_SCALAR(int,varRelid)
	NODE_ENUM(JoinType,jointype)
	NODE_NODE(SpecialJoinInfo,sjinfo)
	NODE_SCALAR(Selectivity,selectivity)
END_NODE(SupportRequestSelectivity)
#endif /* NO_NODE_SupportRequestSelectivity */

#ifndef NO_NODE_SupportRequestCost
BEGIN_NODE(SupportRequestCost)
	NODE_NODE(PlannerInfo,root)
	NODE_SCALAR(Oid,funcid)
	NODE_NODE(Node,node)
	NODE_SCALAR(Cost,startup)
	NODE_SCALAR(Cost,per_tuple)
END_NODE(SupportRequestCost)
#endif /* NO_NODE_SupportRequestCost */

#ifndef NO_NODE_SupportRequestRows
BEGIN_NODE(SupportRequestRows)
	NODE_NODE(PlannerInfo,root)
	NODE_SCALAR(Oid,funcid)
	NODE_NODE(Node,node)
	NODE_SCALAR(double,rows)
END_NODE(SupportRequestRows)
#endif /* NO_NODE_SupportRequestRows */

#ifndef NO_NODE_SupportRequestIndexCondition
BEGIN_NODE(SupportRequestIndexCondition)
	NODE_NODE(PlannerInfo,root)
	NODE_SCALAR(Oid,funcid)
	NODE_NODE(Node,node)
	NODE_SCALAR(int,indexarg)
	NODE_NODE(IndexOptInfo,index)
	NODE_SCALAR(int,indexcol)
	NODE_SCALAR(Oid,opfamily)
	NODE_SCALAR(Oid,indexcollation)
	NODE_SCALAR(bool,lossy)
END_NODE(SupportRequestIndexCondition)
#endif /* NO_NODE_SupportRequestIndexCondition */

#ifdef ADBMGRD

#ifndef NO_NODE_MGRAddHost
BEGIN_NODE(MGRAddHost)
	NODE_SCALAR(bool,if_not_exists)
	NODE_STRING(name)
	NODE_NODE(List,options)
END_NODE(MGRAddHost)
#endif /* NO_NODE_MGRAddHost */

#ifndef NO_NODE_MGRDropHost
BEGIN_NODE(MGRDropHost)
	NODE_SCALAR(bool,if_exists)
	NODE_NODE(List,hosts)
END_NODE(MGRDropHost)
#endif /* NO_NODE_MGRDropHost */

#ifndef NO_NODE_MGRAlterHost
BEGIN_NODE(MGRAlterHost)
	NODE_SCALAR(bool,if_not_exists)
	NODE_STRING(name)
	NODE_NODE(List,options)
END_NODE(MGRAlterHost)
#endif /* NO_NODE_MGRAlterHost */

#ifndef NO_NODE_MGRAddNode
BEGIN_NODE(MGRAddNode)
	NODE_SCALAR(char,nodetype)
	NODE_STRING(mastername)
	NODE_STRING(name)
	NODE_NODE(List,options)
END_NODE(MGRAddNode)
#endif /* NO_NODE_MGRAddNode */

#ifndef NO_NODE_MGRAlterNode
BEGIN_NODE(MGRAlterNode)
	NODE_SCALAR(char,nodetype)
	NODE_STRING(name)
	NODE_NODE(List,options)
END_NODE(MGRAlterNode)
#endif /* NO_NODE_MGRAlterNode */

#ifndef NO_NODE_MGRDropNode
BEGIN_NODE(MGRDropNode)
	NODE_SCALAR(char,nodetype)
	NODE_STRING(name)
END_NODE(MGRDropNode)
#endif /* NO_NODE_MGRDropNode */

#ifndef NO_NODE_MGRUpdateparm
BEGIN_NODE(MGRUpdateparm)
	NODE_SCALAR(char,parmtype)
	NODE_STRING(nodename)
	NODE_SCALAR(char,nodetype)
	NODE_SCALAR(bool,is_force)
	NODE_NODE(List,options)
END_NODE(MGRUpdateparm)
#endif /* NO_NODE_MGRUpdateparm */

#ifndef NO_NODE_MGRUpdateparmReset
BEGIN_NODE(MGRUpdateparmReset)
	NODE_SCALAR(char,parmtype)
	NODE_STRING(nodename)
	NODE_SCALAR(char,nodetype)
	NODE_SCALAR(bool,is_force)
	NODE_NODE(List,options)
END_NODE(MGRUpdateparmReset)
#endif /* NO_NODE_MGRUpdateparmReset */

#ifndef NO_NODE_MGRStartAgent
BEGIN_NODE(MGRStartAgent)
	NODE_NODE(List,hosts)
	NODE_STRING(password)
END_NODE(MGRStartAgent)
#endif /* NO_NODE_MGRStartAgent */

#ifndef NO_NODE_MGRFlushHost
BEGIN_NODE(MGRFlushHost)
END_NODE(MGRFlushHost)
#endif /* NO_NODE_MGRFlushHost */

#ifndef NO_NODE_MGRDoctorSet
BEGIN_NODE(MGRDoctorSet)
	NODE_NODE(List,options)
	NODE_STRING(nodename)
	NODE_STRING(hostname)
	NODE_SCALAR(bool,enable)
END_NODE(MGRDoctorSet)
#endif /* NO_NODE_MGRDoctorSet */

#ifndef NO_NODE_MonitorJobitemAdd
BEGIN_NODE(MonitorJobitemAdd)
	NODE_SCALAR(bool,if_not_exists)
	NODE_STRING(name)
	NODE_NODE(List,options)
END_NODE(MonitorJobitemAdd)
#endif /* NO_NODE_MonitorJobitemAdd */

#ifndef NO_NODE_MonitorJobitemAlter
BEGIN_NODE(MonitorJobitemAlter)
	NODE_STRING(name)
	NODE_NODE(List,options)
END_NODE(MonitorJobitemAlter)
#endif /* NO_NODE_MonitorJobitemAlter */

#ifndef NO_NODE_MonitorJobitemDrop
BEGIN_NODE(MonitorJobitemDrop)
	NODE_SCALAR(bool,if_exists)
	NODE_NODE(List,namelist)
END_NODE(MonitorJobitemDrop)
#endif /* NO_NODE_MonitorJobitemDrop */

#ifndef NO_NODE_MonitorJobAdd
BEGIN_NODE(MonitorJobAdd)
	NODE_SCALAR(bool,if_not_exists)
	NODE_STRING(name)
	NODE_NODE(List,options)
END_NODE(MonitorJobAdd)
#endif /* NO_NODE_MonitorJobAdd */

#ifndef NO_NODE_MonitorJobAlter
BEGIN_NODE(MonitorJobAlter)
	NODE_STRING(name)
	NODE_NODE(List,options)
END_NODE(MonitorJobAlter)
#endif /* NO_NODE_MonitorJobAlter */

#ifndef NO_NODE_MonitorJobDrop
BEGIN_NODE(MonitorJobDrop)
	NODE_SCALAR(bool,if_exists)
	NODE_NODE(List,namelist)
END_NODE(MonitorJobDrop)
#endif /* NO_NODE_MonitorJobDrop */

#ifndef NO_NODE_MgrExtensionAdd
BEGIN_NODE(MgrExtensionAdd)
	NODE_SCALAR(char,cmdtype)
	NODE_STRING(name)
END_NODE(MgrExtensionAdd)
#endif /* NO_NODE_MgrExtensionAdd */

#ifndef NO_NODE_MgrExtensionDrop
BEGIN_NODE(MgrExtensionDrop)
	NODE_SCALAR(char,cmdtype)
	NODE_STRING(name)
END_NODE(MgrExtensionDrop)
#endif /* NO_NODE_MgrExtensionDrop */

#ifndef NO_NODE_MgrRemoveNode
BEGIN_NODE(MgrRemoveNode)
	NODE_SCALAR(char,nodetype)
	NODE_NODE(List,names)
END_NODE(MgrRemoveNode)
#endif /* NO_NODE_MgrRemoveNode */

#ifndef NO_NODE_MGRSetClusterInit
BEGIN_NODE(MGRSetClusterInit)
END_NODE(MGRSetClusterInit)
#endif /* NO_NODE_MGRSetClusterInit */

#ifndef NO_NODE_MonitorDeleteData
BEGIN_NODE(MonitorDeleteData)
	NODE_SCALAR(int32,days)
END_NODE(MonitorDeleteData)
#endif /* NO_NODE_MonitorDeleteData */

#ifndef NO_NODE_MGRFlushParam
BEGIN_NODE(MGRFlushParam)
END_NODE(MGRFlushParam)
#endif /* NO_NODE_MGRFlushParam */

#ifndef NO_NODE_MGRFlushReadonlySlave
BEGIN_NODE(MGRFlushReadonlySlave)
END_NODE(MGRFlushReadonlySlave)
#endif /* NO_NODE_MGRFlushReadonlySlave */

#endif

#ifndef NO_NODE_JoinPath
BEGIN_NODE(JoinPath)
	NODE_BASE2(Path,path)
	NODE_ENUM(JoinType,jointype)
	NODE_SCALAR(bool,inner_unique)
	NODE_NODE(Path,outerjoinpath)
	NODE_NODE(Path,innerjoinpath)
	NODE_NODE(List,joinrestrictinfo)
END_NODE(JoinPath)
#endif /* NO_NODE_JoinPath */
